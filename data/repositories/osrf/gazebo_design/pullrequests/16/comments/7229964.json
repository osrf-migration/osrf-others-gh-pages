{"links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/16/comments/7229964.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_design/diff/osrf/gazebo_design:None..None?path=physics_params%2Fphysics_params.md"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/16/_/diff#comment-7229964"}}, "parent": {"id": 7228388, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/16/comments/7228388.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/16/_/diff#comment-7228388"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 16, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/16.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/16"}}, "title": "Generic physics parameters in Gazebo and SDF"}, "content": {"raw": "Summarizing from an in-person conversation: allowing repeated elements (ie. arrays of primitive types) is tempting to me because it is easy to implement in protobuf, but it's tricky to represent it in sdformat. The following would work, but requires an extra element definition:\n~~~\n    <param name=\"points\">\n      <value type=\"vector2d\">0 0</value>\n      <value type=\"vector2d\">0 1</value>\n      <value type=\"vector2d\">1 1</value>\n    </param>\n~~~\nor\n~~~\n    <param name=\"points\">\n      <vector2d>0 0</vector2d>\n      <vector2d>0 1</vector2d>\n      <vector2d>1 1</vector2d>\n    </param>\n~~~\n\nMaybe this is also difficult on the C++ side too? You would have to `Get<std::vector<Vector2d>>(\"points\")`? That seems like a lot of extra parsing work.", "markup": "markdown", "html": "<p>Summarizing from an in-person conversation: allowing repeated elements (ie. arrays of primitive types) is tempting to me because it is easy to implement in protobuf, but it's tricky to represent it in sdformat. The following would work, but requires an extra element definition:</p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">&quot;points&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;value</span> <span class=\"na\">type=</span><span class=\"s\">&quot;vector2d&quot;</span><span class=\"nt\">&gt;</span>0 0<span class=\"nt\">&lt;/value&gt;</span>\n      <span class=\"nt\">&lt;value</span> <span class=\"na\">type=</span><span class=\"s\">&quot;vector2d&quot;</span><span class=\"nt\">&gt;</span>0 1<span class=\"nt\">&lt;/value&gt;</span>\n      <span class=\"nt\">&lt;value</span> <span class=\"na\">type=</span><span class=\"s\">&quot;vector2d&quot;</span><span class=\"nt\">&gt;</span>1 1<span class=\"nt\">&lt;/value&gt;</span>\n    <span class=\"nt\">&lt;/param&gt;</span>\n</pre></div>\n\n\n<p>or</p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">&quot;points&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;vector2d&gt;</span>0 0<span class=\"nt\">&lt;/vector2d&gt;</span>\n      <span class=\"nt\">&lt;vector2d&gt;</span>0 1<span class=\"nt\">&lt;/vector2d&gt;</span>\n      <span class=\"nt\">&lt;vector2d&gt;</span>1 1<span class=\"nt\">&lt;/vector2d&gt;</span>\n    <span class=\"nt\">&lt;/param&gt;</span>\n</pre></div>\n\n\n<p>Maybe this is also difficult on the C++ side too? You would have to <code>Get&lt;std::vector&lt;Vector2d&gt;&gt;(\"points\")</code>? That seems like a lot of extra parsing work.</p>", "type": "rendered"}, "created_on": "2015-06-02T01:16:08.730812+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {"to": null, "from": null, "outdated": false, "path": "physics_params/physics_params.md"}, "updated_on": "2015-06-02T01:16:08.741109+00:00", "type": "pullrequest_comment", "id": 7229964}