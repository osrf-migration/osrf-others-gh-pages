{"links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/16/comments/7408015.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/16/_/diff#comment-7408015"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 16, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/16.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/16"}}, "title": "Generic physics parameters in Gazebo and SDF"}, "content": {"raw": "My primary concern is that key/value pairs are hard to document and implement well. \n\nWith the current implementation every parameter is explicit, which means they show up in [sdf](http://sdformat.org/spec), and [msgs](http://osrf-distributions.s3.amazonaws.com/gazebo/msg-api/dev/classes.html). Key value pairs can be documented, but it will require more diligence.\n\nRelying on key/value pairs for parameters has system introspection issues. The SDF library will no longer be able to check if a particular SDF file is valid based on the XML alone. You'd have run an SDF file through a program, such as Gazebo, and hope that an appropriate error message is generated when an unused parameter is encountered. Such an error message is difficult to generate, because Gazebo may not need the parameter but some other application may. \n\nAdding new parameters does not necessarily break ABI/API. It is safe to add a new parameter to SDF, and release a new minor version. It is also safe to add a new parameter to protobuf messages, as long as you follow a [few rules](https://developers.google.com/protocol-buffers/docs/proto#updating). \n\nThat leaves changing and removing parameters, which would break ABI/API compatibility. \n\nThe scalabilty arguments are valid, but I'm not 100% convinced that this is a good idea. Especially since parameters are infrequently modified or removed.", "markup": "markdown", "html": "<p>My primary concern is that key/value pairs are hard to document and implement well. </p>\n<p>With the current implementation every parameter is explicit, which means they show up in <a data-is-external-link=\"true\" href=\"http://sdformat.org/spec\" rel=\"nofollow\">sdf</a>, and <a data-is-external-link=\"true\" href=\"http://osrf-distributions.s3.amazonaws.com/gazebo/msg-api/dev/classes.html\" rel=\"nofollow\">msgs</a>. Key value pairs can be documented, but it will require more diligence.</p>\n<p>Relying on key/value pairs for parameters has system introspection issues. The SDF library will no longer be able to check if a particular SDF file is valid based on the XML alone. You'd have run an SDF file through a program, such as Gazebo, and hope that an appropriate error message is generated when an unused parameter is encountered. Such an error message is difficult to generate, because Gazebo may not need the parameter but some other application may. </p>\n<p>Adding new parameters does not necessarily break ABI/API. It is safe to add a new parameter to SDF, and release a new minor version. It is also safe to add a new parameter to protobuf messages, as long as you follow a <a data-is-external-link=\"true\" href=\"https://developers.google.com/protocol-buffers/docs/proto#updating\" rel=\"nofollow\">few rules</a>. </p>\n<p>That leaves changing and removing parameters, which would break ABI/API compatibility. </p>\n<p>The scalabilty arguments are valid, but I'm not 100% convinced that this is a good idea. Especially since parameters are infrequently modified or removed.</p>", "type": "rendered"}, "created_on": "2015-06-09T21:08:14.884039+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2015-06-09T21:08:14.891798+00:00", "type": "pullrequest_comment", "id": 7408015}