{"links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/16/comments/7411119.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/16/_/diff#comment-7411119"}}, "parent": {"id": 7410786, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/16/comments/7410786.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/16/_/diff#comment-7410786"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 16, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/16.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/16"}}, "title": "Generic physics parameters in Gazebo and SDF"}, "content": {"raw": "I'll start with some pros/cons, which we might all agree about:\n\nExplicit parameters\n\n* Pros: better documentation, type safety\n* Cons: more effort to add new parameters, physics API changes bleed into downstream tools (`gz physics` for example)\n* Ideal use case: parameters we expect to stick around\n\nImplicit parameters\n\n* Pros: very easy to add new parameters (just start using them)\n* Cons: hard to document semantic meaning and type information\n* Ideal use case: development, physics engine hacking\n\nIn order of gazebo to be a useful tool for physics engine developers, I think having access to some implicit parameters is essential, even if it's only for unreleased development and testing code. Thinking ahead to the Generic Physics API, there is no way that the explicit approach would capture all the desired parameters.\n\nIn summary, I think we should use both, perhaps strongly encouraging or requiring all of our pull requests / released code to use explicit parameters, while allowing implicit parameters for development and third party code.", "markup": "markdown", "html": "<p>I'll start with some pros/cons, which we might all agree about:</p>\n<p>Explicit parameters</p>\n<ul>\n<li>Pros: better documentation, type safety</li>\n<li>Cons: more effort to add new parameters, physics API changes bleed into downstream tools (<code>gz physics</code> for example)</li>\n<li>Ideal use case: parameters we expect to stick around</li>\n</ul>\n<p>Implicit parameters</p>\n<ul>\n<li>Pros: very easy to add new parameters (just start using them)</li>\n<li>Cons: hard to document semantic meaning and type information</li>\n<li>Ideal use case: development, physics engine hacking</li>\n</ul>\n<p>In order of gazebo to be a useful tool for physics engine developers, I think having access to some implicit parameters is essential, even if it's only for unreleased development and testing code. Thinking ahead to the Generic Physics API, there is no way that the explicit approach would capture all the desired parameters.</p>\n<p>In summary, I think we should use both, perhaps strongly encouraging or requiring all of our pull requests / released code to use explicit parameters, while allowing implicit parameters for development and third party code.</p>", "type": "rendered"}, "created_on": "2015-06-10T00:30:23.072208+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2015-06-10T00:30:23.083919+00:00", "type": "pullrequest_comment", "id": 7411119}