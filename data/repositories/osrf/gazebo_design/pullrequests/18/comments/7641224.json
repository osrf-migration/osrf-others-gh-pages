{"links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/18/comments/7641224.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_design/diff/osrf/gazebo_design:88373c2d90f1..cbceec0723d4?path=nested_model%2Fnested_model.md"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/18/_/diff#comment-7641224"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/18.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/18"}}, "title": "Add support for nested models in Gazebo"}, "content": {"raw": "Here's a complicated but useful idea: partially scoped names.\n\nExample: mobile base with two robot arms and grippers (call it `wall-e`).\nThe base, arms, and grippers are separate models that are nested into `wall-e`:\n\n~~~\n<model name=\"wall-e\">\n  <include>\n    <uri>model://mobile_base</uri>\n  </include>\n  <include>\n    <uri>model://little_arm</uri>\n    <name>left_arm</name>\n    <pose>0 -1 0  0 0 0</pose>\n  </include>\n  <include>\n    <uri>model://little_arm</uri>\n    <name>right_arm</name>\n    <pose>0 1 0  0 0 0</pose>\n  </include>\n  <include>\n    <uri>model://little_gripper</uri>\n    <name>left_gripper</name>\n    <pose>0 -1 1  0 0 0</pose>\n  </include>\n  <include>\n    <uri>model://little_gripper</uri>\n    <name>right_gripper</name>\n    <pose>0 1 1  0 0 0</pose>\n  </include>\n  ...\n</model>\n~~~\n\nWe'll use joints in order to attach everything together.\nThe following uses fully scoped names:\n\n~~~\n<model name=\"wall-e\">\n  ...\n  <joint name=\"left_shoulder\" type=\"revolute\">\n    <parent>wall-e::mobile_base::link</parent>\n    <child>wall-e::left_arm::base_link</child>\n  </joint>\n  ...\n</model>\n~~~\n\nThis causes a problem if you try to insert two `wall-e` models\ninto a world file; the `wall-e` name will increment\nto `wall-e_0` and break the hard-coded name.\n\nIf we allow \"partially scoped names\",\nthen the nested model names (`mobile_base`, `left_arm`) could be used\nwithout the parent model name (`wall-e`).\n\n~~~\n<model name=\"wall-e\">\n  ...\n  <joint name=\"left_shoulder\" type=\"revolute\">\n    <parent>mobile_base::link</parent>\n    <child>left_arm::base_link</child>\n  </joint>\n</model>\n~~~\n\nI think this would be useful, but we should try to identify\nthe order in which models will be searched for names.", "markup": "markdown", "html": "<p>Here's a complicated but useful idea: partially scoped names.</p>\n<p>Example: mobile base with two robot arms and grippers (call it <code>wall-e</code>).\nThe base, arms, and grippers are separate models that are nested into <code>wall-e</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">&lt;model</span> <span class=\"na\">name=</span><span class=\"s\">&quot;wall-e&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;include&gt;</span>\n    <span class=\"nt\">&lt;uri&gt;</span>model://mobile_base<span class=\"nt\">&lt;/uri&gt;</span>\n  <span class=\"nt\">&lt;/include&gt;</span>\n  <span class=\"nt\">&lt;include&gt;</span>\n    <span class=\"nt\">&lt;uri&gt;</span>model://little_arm<span class=\"nt\">&lt;/uri&gt;</span>\n    <span class=\"nt\">&lt;name&gt;</span>left_arm<span class=\"nt\">&lt;/name&gt;</span>\n    <span class=\"nt\">&lt;pose&gt;</span>0 -1 0  0 0 0<span class=\"nt\">&lt;/pose&gt;</span>\n  <span class=\"nt\">&lt;/include&gt;</span>\n  <span class=\"nt\">&lt;include&gt;</span>\n    <span class=\"nt\">&lt;uri&gt;</span>model://little_arm<span class=\"nt\">&lt;/uri&gt;</span>\n    <span class=\"nt\">&lt;name&gt;</span>right_arm<span class=\"nt\">&lt;/name&gt;</span>\n    <span class=\"nt\">&lt;pose&gt;</span>0 1 0  0 0 0<span class=\"nt\">&lt;/pose&gt;</span>\n  <span class=\"nt\">&lt;/include&gt;</span>\n  <span class=\"nt\">&lt;include&gt;</span>\n    <span class=\"nt\">&lt;uri&gt;</span>model://little_gripper<span class=\"nt\">&lt;/uri&gt;</span>\n    <span class=\"nt\">&lt;name&gt;</span>left_gripper<span class=\"nt\">&lt;/name&gt;</span>\n    <span class=\"nt\">&lt;pose&gt;</span>0 -1 1  0 0 0<span class=\"nt\">&lt;/pose&gt;</span>\n  <span class=\"nt\">&lt;/include&gt;</span>\n  <span class=\"nt\">&lt;include&gt;</span>\n    <span class=\"nt\">&lt;uri&gt;</span>model://little_gripper<span class=\"nt\">&lt;/uri&gt;</span>\n    <span class=\"nt\">&lt;name&gt;</span>right_gripper<span class=\"nt\">&lt;/name&gt;</span>\n    <span class=\"nt\">&lt;pose&gt;</span>0 1 1  0 0 0<span class=\"nt\">&lt;/pose&gt;</span>\n  <span class=\"nt\">&lt;/include&gt;</span>\n  ...\n<span class=\"nt\">&lt;/model&gt;</span>\n</pre></div>\n\n\n<p>We'll use joints in order to attach everything together.\nThe following uses fully scoped names:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">&lt;model</span> <span class=\"na\">name=</span><span class=\"s\">&quot;wall-e&quot;</span><span class=\"nt\">&gt;</span>\n  ...\n  <span class=\"nt\">&lt;joint</span> <span class=\"na\">name=</span><span class=\"s\">&quot;left_shoulder&quot;</span> <span class=\"na\">type=</span><span class=\"s\">&quot;revolute&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;parent&gt;</span>wall-e::mobile_base::link<span class=\"nt\">&lt;/parent&gt;</span>\n    <span class=\"nt\">&lt;child&gt;</span>wall-e::left_arm::base_link<span class=\"nt\">&lt;/child&gt;</span>\n  <span class=\"nt\">&lt;/joint&gt;</span>\n  ...\n<span class=\"nt\">&lt;/model&gt;</span>\n</pre></div>\n\n\n<p>This causes a problem if you try to insert two <code>wall-e</code> models\ninto a world file; the <code>wall-e</code> name will increment\nto <code>wall-e_0</code> and break the hard-coded name.</p>\n<p>If we allow \"partially scoped names\",\nthen the nested model names (<code>mobile_base</code>, <code>left_arm</code>) could be used\nwithout the parent model name (<code>wall-e</code>).</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">&lt;model</span> <span class=\"na\">name=</span><span class=\"s\">&quot;wall-e&quot;</span><span class=\"nt\">&gt;</span>\n  ...\n  <span class=\"nt\">&lt;joint</span> <span class=\"na\">name=</span><span class=\"s\">&quot;left_shoulder&quot;</span> <span class=\"na\">type=</span><span class=\"s\">&quot;revolute&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;parent&gt;</span>mobile_base::link<span class=\"nt\">&lt;/parent&gt;</span>\n    <span class=\"nt\">&lt;child&gt;</span>left_arm::base_link<span class=\"nt\">&lt;/child&gt;</span>\n  <span class=\"nt\">&lt;/joint&gt;</span>\n<span class=\"nt\">&lt;/model&gt;</span>\n</pre></div>\n\n\n<p>I think this would be useful, but we should try to identify\nthe order in which models will be searched for names.</p>", "type": "rendered"}, "created_on": "2015-06-18T18:24:40.699278+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {"to": 67, "from": null, "outdated": true, "path": "nested_model/nested_model.md"}, "updated_on": "2015-06-18T18:24:40.707988+00:00", "type": "pullrequest_comment", "id": 7641224}