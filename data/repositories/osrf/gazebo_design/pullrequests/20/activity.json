{"pagelen": 50, "values": [{"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/8260223.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-8260223"}}, "parent": {"id": 8260106, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/8260106.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-8260106"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}, "content": {"raw": "Technically speaking, I don't believe there is one. But the main issue raised was that it wouldn't be intuitive to have `Light` implement `SetMaterial` and `SetScale` functions.", "markup": "markdown", "html": "<p>Technically speaking, I don't believe there is one. But the main issue raised was that it wouldn't be intuitive to have <code>Light</code> implement <code>SetMaterial</code> and <code>SetScale</code> functions.</p>", "type": "rendered"}, "created_on": "2015-07-15T01:27:43.058653+00:00", "user": {"display_name": "MIke Kasper", "uuid": "{ccb25b19-dcb4-427e-a543-0819a90f1e03}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bccb25b19-dcb4-427e-a543-0819a90f1e03%7D"}, "html": {"href": "https://bitbucket.org/%7Bccb25b19-dcb4-427e-a543-0819a90f1e03%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7a569dea81978ffcfe79b403bc4f692cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMK-0.png"}}, "nickname": "mkaspr", "type": "user", "account_id": "557058:574b2f46-2e8e-4a43-94de-428c29610eaf"}, "inline": {}, "updated_on": "2015-07-15T01:27:43.239250+00:00", "type": "pullrequest_comment", "id": 8260223}, "pull_request": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/8260106.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-8260106"}}, "parent": {"id": 8260048, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/8260048.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-8260048"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}, "content": {"raw": "Humm, what would be the issues if we allow a Light to have a Visual as child? Having children could be a characteristic of a Node.", "markup": "markdown", "html": "<p>Humm, what would be the issues if we allow a Light to have a Visual as child? Having children could be a characteristic of a Node.</p>", "type": "rendered"}, "created_on": "2015-07-15T01:19:32.446074+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {}, "updated_on": "2015-07-15T01:19:32.455379+00:00", "type": "pullrequest_comment", "id": 8260106}, "pull_request": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/8260048.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-8260048"}}, "parent": {"id": 8259694, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/8259694.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-8259694"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}, "content": {"raw": "Sorry, I should have said: a single `Visual` will be a member variable of `Light`, not set via some publicly exposed `AddChild` function as with `Visual`, but rather predefined and enabled/disabled via a `ShowVisual` function. In the internal scene-graph representation (Ogre or Optix) the visual, in a sense, would be a child of the light.", "markup": "markdown", "html": "<p>Sorry, I should have said: a single <code>Visual</code> will be a member variable of <code>Light</code>, not set via some publicly exposed <code>AddChild</code> function as with <code>Visual</code>, but rather predefined and enabled/disabled via a <code>ShowVisual</code> function. In the internal scene-graph representation (Ogre or Optix) the visual, in a sense, would be a child of the light.</p>", "type": "rendered"}, "created_on": "2015-07-15T01:13:47.850587+00:00", "user": {"display_name": "MIke Kasper", "uuid": "{ccb25b19-dcb4-427e-a543-0819a90f1e03}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bccb25b19-dcb4-427e-a543-0819a90f1e03%7D"}, "html": {"href": "https://bitbucket.org/%7Bccb25b19-dcb4-427e-a543-0819a90f1e03%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7a569dea81978ffcfe79b403bc4f692cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMK-0.png"}}, "nickname": "mkaspr", "type": "user", "account_id": "557058:574b2f46-2e8e-4a43-94de-428c29610eaf"}, "inline": {}, "updated_on": "2015-07-15T01:13:48.021498+00:00", "type": "pullrequest_comment", "id": 8260048}, "pull_request": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/8259694.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-8259694"}}, "parent": {"id": 8259617, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/8259617.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-8259617"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}, "content": {"raw": "So the Visual wouldn't be a child of the Light, but would move in sync with it?", "markup": "markdown", "html": "<p>So the Visual wouldn't be a child of the Light, but would move in sync with it?</p>", "type": "rendered"}, "created_on": "2015-07-15T00:45:37.700666+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {}, "updated_on": "2015-07-15T00:45:37.708664+00:00", "type": "pullrequest_comment", "id": 8259694}, "pull_request": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/8259620.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-8259620"}}, "parent": {"id": 8257442, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/8257442.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-8257442"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}, "content": {"raw": "Awesome, thanks!", "markup": "markdown", "html": "<p>Awesome, thanks!</p>", "type": "rendered"}, "created_on": "2015-07-15T00:39:26.715555+00:00", "user": {"display_name": "MIke Kasper", "uuid": "{ccb25b19-dcb4-427e-a543-0819a90f1e03}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bccb25b19-dcb4-427e-a543-0819a90f1e03%7D"}, "html": {"href": "https://bitbucket.org/%7Bccb25b19-dcb4-427e-a543-0819a90f1e03%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7a569dea81978ffcfe79b403bc4f692cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMK-0.png"}}, "nickname": "mkaspr", "type": "user", "account_id": "557058:574b2f46-2e8e-4a43-94de-428c29610eaf"}, "updated_on": "2015-07-15T00:39:26.754440+00:00", "type": "pullrequest_comment", "id": 8259620}, "pull_request": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/8259617.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-8259617"}}, "parent": {"id": 8257433, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/8257433.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-8257433"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}, "content": {"raw": "After talking about it some more, I think we can copy our current approach with visualizations. That is, the user/sdf cannot add `Visual` objects to a `Light`, however the `Light` will provide a `ShowVisual` function to display a predefined `Visual`. This way the pose of the `Visual` will update with the `Light`.", "markup": "markdown", "html": "<p>After talking about it some more, I think we can copy our current approach with visualizations. That is, the user/sdf cannot add <code>Visual</code> objects to a <code>Light</code>, however the <code>Light</code> will provide a <code>ShowVisual</code> function to display a predefined <code>Visual</code>. This way the pose of the <code>Visual</code> will update with the <code>Light</code>.</p>", "type": "rendered"}, "created_on": "2015-07-15T00:39:17.045966+00:00", "user": {"display_name": "MIke Kasper", "uuid": "{ccb25b19-dcb4-427e-a543-0819a90f1e03}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bccb25b19-dcb4-427e-a543-0819a90f1e03%7D"}, "html": {"href": "https://bitbucket.org/%7Bccb25b19-dcb4-427e-a543-0819a90f1e03%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7a569dea81978ffcfe79b403bc4f692cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMK-0.png"}}, "nickname": "mkaspr", "type": "user", "account_id": "557058:574b2f46-2e8e-4a43-94de-428c29610eaf"}, "inline": {}, "updated_on": "2015-07-15T00:39:17.163054+00:00", "type": "pullrequest_comment", "id": 8259617}, "pull_request": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}}, {"update": {"description": "This document outlines the proposed design changes for replacing the direct calls to Ogre with a generic interface. The main goal is to allow other render-engines to be easily used in place of or in tandem with Ogre.", "title": "Abstracting Render-engine Interface in Gazebo", "destination": {"commit": {"hash": "4f5f3f45e8b1", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_design/commit/4f5f3f45e8b1.json"}, "html": {"href": "#!/osrf/gazebo_design/commits/4f5f3f45e8b1"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_design.json"}, "html": {"href": "#!/osrf/gazebo_design"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d7bf1c81-183c-42cc-8760-b207a9a49991}ts=markdown"}}, "type": "repository", "name": "gazebo_design", "full_name": "osrf/gazebo_design", "uuid": "{d7bf1c81-183c-42cc-8760-b207a9a49991}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "16f24283d8e9", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mkaspr/gazebo_design/commit/16f24283d8e9"}, "html": {"href": "https://bitbucket.org/mkaspr/gazebo_design/commits/16f24283d8e9"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mkaspr/gazebo_design"}, "html": {"href": "https://bitbucket.org/mkaspr/gazebo_design"}, "avatar": {"href": "data/bytebucket.org/ravatar/{75f0a705-5bab-4a36-9928-f6f8aa947f3b}ts=markdown"}}, "type": "repository", "name": "gazebo_design", "full_name": "mkaspr/gazebo_design", "uuid": "{75f0a705-5bab-4a36-9928-f6f8aa947f3b}"}, "branch": {"name": "render_engine"}}, "state": "MERGED", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2015-07-14T22:22:26.253982+00:00"}, "pull_request": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/8257442.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-8257442"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}, "content": {"raw": "Approved, merging :wink: ", "markup": "markdown", "html": "<p>Approved, merging <img class=\"emoji\" src=\"data/pf-emoji-service--cdn.us-east-1.prod.public.atl-paas.net/standard/551c9814-1d37-4573-819d-afab3afeaf32/48x48/1f609.png\" alt=\"\ud83d\ude09\" title=\":wink:\" data-emoji-short-name=\":wink:\" /> </p>", "type": "rendered"}, "created_on": "2015-07-14T22:22:20.159129+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2015-07-14T22:22:20.166306+00:00", "type": "pullrequest_comment", "id": 8257442}, "pull_request": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}}, {"approval": {"date": "2015-07-14T22:21:58.932688+00:00", "pullrequest": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}, "pull_request": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/8257433.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-8257433"}}, "parent": {"id": 8257362, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/8257362.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-8257362"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}, "content": {"raw": "I see, sounds good. It's probably useful for them to have pose, but I might just be used to the way things are now.", "markup": "markdown", "html": "<p>I see, sounds good. It's probably useful for them to have pose, but I might just be used to the way things are now.</p>", "type": "rendered"}, "created_on": "2015-07-14T22:21:54.968840+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {}, "updated_on": "2015-07-14T22:21:54.977184+00:00", "type": "pullrequest_comment", "id": 8257433}, "pull_request": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/8257362.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-8257362"}}, "parent": {"id": 8256749, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/8256749.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-8256749"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}, "content": {"raw": "That's right. The design originally allowed `Light` and `Sensor` to have children. But it would require these classes to implement the functions `SetMaterial` and `SetScale` (simply so it could cascade on to any `Visual` children). We felt this was less intuitive and instead adopted the design where `Visual` objects do not have children. But this does have the downside where a `Light` now requires an additional `Visual` parent and its pose updates to be reinterpreted in order to be visualized.\n\nThat being said, it begs the question if `Sensor` and `Light` should have `SetPose` functions at all.", "markup": "markdown", "html": "<p>That's right. The design originally allowed <code>Light</code> and <code>Sensor</code> to have children. But it would require these classes to implement the functions <code>SetMaterial</code> and <code>SetScale</code> (simply so it could cascade on to any <code>Visual</code> children). We felt this was less intuitive and instead adopted the design where <code>Visual</code> objects do not have children. But this does have the downside where a <code>Light</code> now requires an additional <code>Visual</code> parent and its pose updates to be reinterpreted in order to be visualized.</p>\n<p>That being said, it begs the question if <code>Sensor</code> and <code>Light</code> should have <code>SetPose</code> functions at all.</p>", "type": "rendered"}, "created_on": "2015-07-14T22:17:44.787058+00:00", "user": {"display_name": "MIke Kasper", "uuid": "{ccb25b19-dcb4-427e-a543-0819a90f1e03}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bccb25b19-dcb4-427e-a543-0819a90f1e03%7D"}, "html": {"href": "https://bitbucket.org/%7Bccb25b19-dcb4-427e-a543-0819a90f1e03%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7a569dea81978ffcfe79b403bc4f692cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMK-0.png"}}, "nickname": "mkaspr", "type": "user", "account_id": "557058:574b2f46-2e8e-4a43-94de-428c29610eaf"}, "inline": {}, "updated_on": "2015-07-14T22:17:44.848072+00:00", "type": "pullrequest_comment", "id": 8257362}, "pull_request": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/8256749.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-8256749"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}, "content": {"raw": "Just to make sure I'm getting this right. If I want a light to have a visual representation in the scene (right now we have some green lines), since `Light` cannot have children, We would create a `Visual` and add the light as its child, right?", "markup": "markdown", "html": "<p>Just to make sure I'm getting this right. If I want a light to have a visual representation in the scene (right now we have some green lines), since <code>Light</code> cannot have children, We would create a <code>Visual</code> and add the light as its child, right?</p>", "type": "rendered"}, "created_on": "2015-07-14T21:44:57.053678+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {}, "updated_on": "2015-07-14T21:44:57.061986+00:00", "type": "pullrequest_comment", "id": 8256749}, "pull_request": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}}, {"approval": {"date": "2015-07-09T01:44:29.292042+00:00", "pullrequest": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}, "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}, "pull_request": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}}, {"update": {"description": "This document outlines the proposed design changes for replacing the direct calls to Ogre with a generic interface. The main goal is to allow other render-engines to be easily used in place of or in tandem with Ogre.", "title": "Abstracting Render-engine Interface in Gazebo", "destination": {"commit": {"hash": "b4533c950752", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_design/commit/b4533c950752.json"}, "html": {"href": "#!/osrf/gazebo_design/commits/b4533c950752"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_design.json"}, "html": {"href": "#!/osrf/gazebo_design"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d7bf1c81-183c-42cc-8760-b207a9a49991}ts=markdown"}}, "type": "repository", "name": "gazebo_design", "full_name": "osrf/gazebo_design", "uuid": "{d7bf1c81-183c-42cc-8760-b207a9a49991}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "16f24283d8e9", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mkaspr/gazebo_design/commit/16f24283d8e9"}, "html": {"href": "https://bitbucket.org/mkaspr/gazebo_design/commits/16f24283d8e9"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mkaspr/gazebo_design"}, "html": {"href": "https://bitbucket.org/mkaspr/gazebo_design"}, "avatar": {"href": "data/bytebucket.org/ravatar/{75f0a705-5bab-4a36-9928-f6f8aa947f3b}ts=markdown"}}, "type": "repository", "name": "gazebo_design", "full_name": "mkaspr/gazebo_design", "uuid": "{75f0a705-5bab-4a36-9928-f6f8aa947f3b}"}, "branch": {"name": "render_engine"}}, "state": "OPEN", "author": {"display_name": "MIke Kasper", "uuid": "{ccb25b19-dcb4-427e-a543-0819a90f1e03}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bccb25b19-dcb4-427e-a543-0819a90f1e03%7D"}, "html": {"href": "https://bitbucket.org/%7Bccb25b19-dcb4-427e-a543-0819a90f1e03%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7a569dea81978ffcfe79b403bc4f692cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMK-0.png"}}, "nickname": "mkaspr", "type": "user", "account_id": "557058:574b2f46-2e8e-4a43-94de-428c29610eaf"}, "date": "2015-07-08T22:24:59.766826+00:00"}, "pull_request": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/8114132.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-8114132"}}, "parent": {"id": 8113621, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/8113621.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-8113621"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}, "content": {"raw": "Good idea, especially after the geometry-related design change. I'll update it accordingly.", "markup": "markdown", "html": "<p>Good idea, especially after the geometry-related design change. I'll update it accordingly.</p>", "type": "rendered"}, "created_on": "2015-07-08T18:20:43.189222+00:00", "user": {"display_name": "MIke Kasper", "uuid": "{ccb25b19-dcb4-427e-a543-0819a90f1e03}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bccb25b19-dcb4-427e-a543-0819a90f1e03%7D"}, "html": {"href": "https://bitbucket.org/%7Bccb25b19-dcb4-427e-a543-0819a90f1e03%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7a569dea81978ffcfe79b403bc4f692cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMK-0.png"}}, "nickname": "mkaspr", "type": "user", "account_id": "557058:574b2f46-2e8e-4a43-94de-428c29610eaf"}, "inline": {}, "updated_on": "2015-07-08T18:20:43.307524+00:00", "type": "pullrequest_comment", "id": 8114132}, "pull_request": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/8114016.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-8114016"}}, "parent": {"id": 8113603, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/8113603.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-8113603"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}, "content": {"raw": "Sure thing. I was wondering if I should make it case-insensitive. But I'll stick with strict lowercase.", "markup": "markdown", "html": "<p>Sure thing. I was wondering if I should make it case-insensitive. But I'll stick with strict lowercase.</p>", "type": "rendered"}, "created_on": "2015-07-08T18:17:21.718491+00:00", "user": {"display_name": "MIke Kasper", "uuid": "{ccb25b19-dcb4-427e-a543-0819a90f1e03}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bccb25b19-dcb4-427e-a543-0819a90f1e03%7D"}, "html": {"href": "https://bitbucket.org/%7Bccb25b19-dcb4-427e-a543-0819a90f1e03%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7a569dea81978ffcfe79b403bc4f692cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMK-0.png"}}, "nickname": "mkaspr", "type": "user", "account_id": "557058:574b2f46-2e8e-4a43-94de-428c29610eaf"}, "inline": {}, "updated_on": "2015-07-08T18:17:21.761680+00:00", "type": "pullrequest_comment", "id": 8114016}, "pull_request": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/8113997.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-8113997"}}, "parent": {"id": 8113558, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/8113558.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-8113558"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}, "content": {"raw": "1. Yes, good point. I also plan to have a `CreateMesh(common::Mesh)` function in `Scene` that returns a `Mesh` geometry. You could then assign this to a `Visual` like any other `Geometry` via `AddGeometry(myMesh)`. But you will have to assign your own `Material` separately.\n    * I don't envision having a `CreateMaterial(common::Mesh)` function, as the resulting material will most likely be mesh-specific, so there is no reason why one wouldn't just use `CreateMeshVisual`. Let me know if you think otherwise.\n1. Thanks, I overlooked that. At the moment I only had `Add(geom)` and `Remove(index)`. But `Set(index, geom)` will be a nice addition.", "markup": "markdown", "html": "<ol>\n<li>Yes, good point. I also plan to have a <code>CreateMesh(common::Mesh)</code> function in <code>Scene</code> that returns a <code>Mesh</code> geometry. You could then assign this to a <code>Visual</code> like any other <code>Geometry</code> via <code>AddGeometry(myMesh)</code>. But you will have to assign your own <code>Material</code> separately.<ul>\n<li>I don't envision having a <code>CreateMaterial(common::Mesh)</code> function, as the resulting material will most likely be mesh-specific, so there is no reason why one wouldn't just use <code>CreateMeshVisual</code>. Let me know if you think otherwise.</li>\n</ul>\n</li>\n<li>Thanks, I overlooked that. At the moment I only had <code>Add(geom)</code> and <code>Remove(index)</code>. But <code>Set(index, geom)</code> will be a nice addition.</li>\n</ol>", "type": "rendered"}, "created_on": "2015-07-08T18:16:32.262211+00:00", "user": {"display_name": "MIke Kasper", "uuid": "{ccb25b19-dcb4-427e-a543-0819a90f1e03}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bccb25b19-dcb4-427e-a543-0819a90f1e03%7D"}, "html": {"href": "https://bitbucket.org/%7Bccb25b19-dcb4-427e-a543-0819a90f1e03%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7a569dea81978ffcfe79b403bc4f692cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMK-0.png"}}, "nickname": "mkaspr", "type": "user", "account_id": "557058:574b2f46-2e8e-4a43-94de-428c29610eaf"}, "inline": {}, "updated_on": "2015-07-08T18:16:32.312521+00:00", "type": "pullrequest_comment", "id": 8113997}, "pull_request": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/8113621.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-8113621"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}, "content": {"raw": "test adding/removing/updating geometry of a visual?", "markup": "markdown", "html": "<p>test adding/removing/updating geometry of a visual?</p>", "type": "rendered"}, "created_on": "2015-07-08T18:01:36.689407+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "inline": {}, "updated_on": "2015-07-08T18:01:36.698629+00:00", "type": "pullrequest_comment", "id": 8113621}, "pull_request": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/8113603.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-8113603"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}, "content": {"raw": "minor suggestion - currently we use all lower case to choose physics engines so for consistency we could use `ogre` here", "markup": "markdown", "html": "<p>minor suggestion - currently we use all lower case to choose physics engines so for consistency we could use <code>ogre</code> here</p>", "type": "rendered"}, "created_on": "2015-07-08T18:00:59.362522+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "inline": {}, "updated_on": "2015-07-08T18:00:59.369824+00:00", "type": "pullrequest_comment", "id": 8113603}, "pull_request": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/8113558.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-8113558"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}, "content": {"raw": "a couple of questions:\n\n1. how would you add a mesh geometry to a visual later if we did not create the visual with this call (`CreateVisual(\"my_mesh\", mesh)`)?\n\n1. will there be an API to let you update the geometry contained in the visual? something like\n\n        SetGeometry(index, newCone)\n\n    or     \n\n        visual->RemoveGeometry(index)\n        visual->AddGeometry(newCone)\n    ", "markup": "markdown", "html": "<p>a couple of questions:</p>\n<ol>\n<li>\n<p>how would you add a mesh geometry to a visual later if we did not create the visual with this call (<code>CreateVisual(\"my_mesh\", mesh)</code>)?</p>\n</li>\n<li>\n<p>will there be an API to let you update the geometry contained in the visual? something like</p>\n<div class=\"codehilite\"><pre><span></span>SetGeometry(index, newCone)\n</pre></div>\n\n\n<p>or     </p>\n<div class=\"codehilite\"><pre><span></span>visual-&gt;RemoveGeometry(index)\nvisual-&gt;AddGeometry(newCone)\n</pre></div>\n\n\n</li>\n</ol>", "type": "rendered"}, "created_on": "2015-07-08T17:59:28.401378+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "inline": {}, "updated_on": "2015-07-08T17:59:28.415868+00:00", "type": "pullrequest_comment", "id": 8113558}, "pull_request": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}}, {"update": {"description": "This document outlines the proposed design changes for replacing the direct calls to Ogre with a generic interface. The main goal is to allow other render-engines to be easily used in place of or in tandem with Ogre.", "title": "Abstracting Render-engine Interface in Gazebo", "destination": {"commit": {"hash": "cbceec0723d4", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_design/commit/cbceec0723d4.json"}, "html": {"href": "#!/osrf/gazebo_design/commits/cbceec0723d4"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_design.json"}, "html": {"href": "#!/osrf/gazebo_design"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d7bf1c81-183c-42cc-8760-b207a9a49991}ts=markdown"}}, "type": "repository", "name": "gazebo_design", "full_name": "osrf/gazebo_design", "uuid": "{d7bf1c81-183c-42cc-8760-b207a9a49991}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "25a5dc2665b9", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mkaspr/gazebo_design/commit/25a5dc2665b9"}, "html": {"href": "https://bitbucket.org/mkaspr/gazebo_design/commits/25a5dc2665b9"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mkaspr/gazebo_design"}, "html": {"href": "https://bitbucket.org/mkaspr/gazebo_design"}, "avatar": {"href": "data/bytebucket.org/ravatar/{75f0a705-5bab-4a36-9928-f6f8aa947f3b}ts=markdown"}}, "type": "repository", "name": "gazebo_design", "full_name": "mkaspr/gazebo_design", "uuid": "{75f0a705-5bab-4a36-9928-f6f8aa947f3b}"}, "branch": {"name": "render_engine"}}, "state": "OPEN", "author": {"display_name": "MIke Kasper", "uuid": "{ccb25b19-dcb4-427e-a543-0819a90f1e03}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bccb25b19-dcb4-427e-a543-0819a90f1e03%7D"}, "html": {"href": "https://bitbucket.org/%7Bccb25b19-dcb4-427e-a543-0819a90f1e03%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7a569dea81978ffcfe79b403bc4f692cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMK-0.png"}}, "nickname": "mkaspr", "type": "user", "account_id": "557058:574b2f46-2e8e-4a43-94de-428c29610eaf"}, "date": "2015-07-07T04:18:47.143585+00:00"}, "pull_request": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/7993691.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-7993691"}}, "parent": {"id": 7992403, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/7992403.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-7992403"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}, "content": {"raw": "I've implemented basic functionality in OptiX and almost finished doing the same with Ogre. However I'm only compiling the rendering > sensors > plugins pipeline. Neither deal with the GUI side of things yet, where the a lot of the Ogre-specific code is hiding.\n\nIt would certainly be good to compare performance between the old and new Ogre implementations, to see how much of a hit we're taking. As for the managing multiple scenes, I've also implemented a solution that I believe should address the issue, but perhaps it warrants a design PR of its own. And as for fine-tuning against a generic API, there are already a few issues that I'm scratching my head about, namely selecting OptiX's acceleration structure types and the use of theoretical primitives (no tessellation).", "markup": "markdown", "html": "<p>I've implemented basic functionality in OptiX and almost finished doing the same with Ogre. However I'm only compiling the rendering &gt; sensors &gt; plugins pipeline. Neither deal with the GUI side of things yet, where the a lot of the Ogre-specific code is hiding.</p>\n<p>It would certainly be good to compare performance between the old and new Ogre implementations, to see how much of a hit we're taking. As for the managing multiple scenes, I've also implemented a solution that I believe should address the issue, but perhaps it warrants a design PR of its own. And as for fine-tuning against a generic API, there are already a few issues that I'm scratching my head about, namely selecting OptiX's acceleration structure types and the use of theoretical primitives (no tessellation).</p>", "type": "rendered"}, "created_on": "2015-07-03T02:55:15.771213+00:00", "user": {"display_name": "MIke Kasper", "uuid": "{ccb25b19-dcb4-427e-a543-0819a90f1e03}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bccb25b19-dcb4-427e-a543-0819a90f1e03%7D"}, "html": {"href": "https://bitbucket.org/%7Bccb25b19-dcb4-427e-a543-0819a90f1e03%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7a569dea81978ffcfe79b403bc4f692cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMK-0.png"}}, "nickname": "mkaspr", "type": "user", "account_id": "557058:574b2f46-2e8e-4a43-94de-428c29610eaf"}, "inline": {}, "updated_on": "2015-07-03T02:55:15.908897+00:00", "type": "pullrequest_comment", "id": 7993691}, "pull_request": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/7992403.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-7992403"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}, "content": {"raw": "Do you have an example of gazebo currently doing this? It sounds scary, but I'm guessing it's not actually that scary?", "markup": "markdown", "html": "<p>Do you have an example of gazebo currently doing this? It sounds scary, but I'm guessing it's not actually that scary?</p>", "type": "rendered"}, "created_on": "2015-07-03T00:55:07.226337+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2015-07-03T00:55:07.234733+00:00", "type": "pullrequest_comment", "id": 7992403}, "pull_request": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/7990416.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-7990416"}}, "parent": {"id": 7951300, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/7951300.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-7951300"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}, "content": {"raw": "Thanks for the feedback! Sorry for the delay, I had to think about this a bit.\n\nMy main reason for splitting the current `Visual` functionality into separate `Node` and `Visual` classes was to allow other elements like `Sensor` and `Light` to be added easily to models (think headlights on a car). At the moment, I believe `Light` objects can only be added directly to the `Scene` root node with a global pose. Alternatively, we could copy how `Camera` currently achieves this with its `TrackVisual` functionality. But I feel the proposed design would be cleaner.\n\nAs for the relationship between `Geometry` and `Visual`, you made some good points. The issue with my current design is that you cannot change the pose of `Geometry` directly. So there is no way to add multiple `Geometry` objects to a single `Visual`. Given this, I propose modifying the design slightly as follows:\n\n![uml5.png](data/bitbucket.org/repo/RgX9je/images/2300196190-uml5.png)\n\nHere we'd drop the `Geometry` class and instead have a `Visual` subclass for each primitive. The `ArrowVisual` would be a child of `CompositeVisual`. Implementations of `CompositeVisual` would maintain two data-structures: 1) the child `Node` list inherited from `Node` and 2) a separate list of private `Visual` objects. This would also make it easy to apply a `Material` to only the private `Visual` objects.\n\nThe proposed design also allows two possible \"empty\" nodes. There is a `EmptyVisual` class, as \"EMPTY\" is a geometry-type in SDF. Additionally, we provide a `Link` node. This has the ability to set the pose and add children as inherited from `Node` with no additional functionality or visuals.\n\nIf this approach currently sounds reasonable, I can spend the time to fully flesh out the UML diagram with all classes as you suggested.", "markup": "markdown", "html": "<p>Thanks for the feedback! Sorry for the delay, I had to think about this a bit.</p>\n<p>My main reason for splitting the current <code>Visual</code> functionality into separate <code>Node</code> and <code>Visual</code> classes was to allow other elements like <code>Sensor</code> and <code>Light</code> to be added easily to models (think headlights on a car). At the moment, I believe <code>Light</code> objects can only be added directly to the <code>Scene</code> root node with a global pose. Alternatively, we could copy how <code>Camera</code> currently achieves this with its <code>TrackVisual</code> functionality. But I feel the proposed design would be cleaner.</p>\n<p>As for the relationship between <code>Geometry</code> and <code>Visual</code>, you made some good points. The issue with my current design is that you cannot change the pose of <code>Geometry</code> directly. So there is no way to add multiple <code>Geometry</code> objects to a single <code>Visual</code>. Given this, I propose modifying the design slightly as follows:</p>\n<p><img alt=\"uml5.png\" src=\"data/bitbucket.org/repo/RgX9je/images/2300196190-uml5.png\" /></p>\n<p>Here we'd drop the <code>Geometry</code> class and instead have a <code>Visual</code> subclass for each primitive. The <code>ArrowVisual</code> would be a child of <code>CompositeVisual</code>. Implementations of <code>CompositeVisual</code> would maintain two data-structures: 1) the child <code>Node</code> list inherited from <code>Node</code> and 2) a separate list of private <code>Visual</code> objects. This would also make it easy to apply a <code>Material</code> to only the private <code>Visual</code> objects.</p>\n<p>The proposed design also allows two possible \"empty\" nodes. There is a <code>EmptyVisual</code> class, as \"EMPTY\" is a geometry-type in SDF. Additionally, we provide a <code>Link</code> node. This has the ability to set the pose and add children as inherited from <code>Node</code> with no additional functionality or visuals.</p>\n<p>If this approach currently sounds reasonable, I can spend the time to fully flesh out the UML diagram with all classes as you suggested.</p>", "type": "rendered"}, "created_on": "2015-07-02T22:00:33.747410+00:00", "user": {"display_name": "MIke Kasper", "uuid": "{ccb25b19-dcb4-427e-a543-0819a90f1e03}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bccb25b19-dcb4-427e-a543-0819a90f1e03%7D"}, "html": {"href": "https://bitbucket.org/%7Bccb25b19-dcb4-427e-a543-0819a90f1e03%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7a569dea81978ffcfe79b403bc4f692cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMK-0.png"}}, "nickname": "mkaspr", "type": "user", "account_id": "557058:574b2f46-2e8e-4a43-94de-428c29610eaf"}, "inline": {}, "updated_on": "2015-07-02T22:00:33.849151+00:00", "type": "pullrequest_comment", "id": 7990416}, "pull_request": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/7951300.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-7951300"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}, "content": {"raw": "Could you elaborate a bit more on this structure? \n\nIf I understand well (and I probably don't), what we currently have as `Visual` performs the function of both `Node` and `Visual`. That is, it might be just a visualization of something, like a box, or it might behave as a container for other visuals and not have a visual representation (geometry / material) of its own. Could you go into a bit more detail on how you intend to split the existing functionality?\n\nOne thing that might be tedious but perhaps will save us time in the future is to list all classes that will be created and their relationships. For example, there will be a `Model` class which inherits from `Node`, right? How about all the visuals which get attached to a link, such as the \"visual visuals\", collision visuals, CoM, inertia, joints... Will these inherit from `Node` or from `Visual`? How will they be structured?\n\nWill a `Visual` have a single geometry or can it contain a lot of smaller geometries which are assembled together? For example, you mention that \"axis-arrows are cones and cylinders of a certain color and proportion, no matter the underlying render-engine\", I imagine this being a reference to the current [ArrowVisual](http://osrf-distributions.s3.amazonaws.com/gazebo/api/dev/classgazebo_1_1rendering_1_1ArrowVisual.html) class. Would a class like `ArrowVisual` inherit from `Node` and have two visuals, one for the cone and one for the cylinder, or would it inherit from `Visual` and have two geometries and their respective materials?\n\nIt might be interesting to trace a parallel with the [physics::Base](http://osrf-distributions.s3.amazonaws.com/gazebo/api/dev/classgazebo_1_1physics_1_1Base.html) class and how it abstracts some functionality (or maybe it's not a good parallel...).\n\nAnother thing that this reminded me of is the structure of `three.js`, the library we use on [GzWeb](https://bitbucket.org/osrf/gzweb). They have the [Object3D](http://threejs.org/docs/#Reference/Core/Object3D) class, which is the base for everything, from [Camera](http://threejs.org/docs/#Reference/Cameras/Camera) to [Mesh](http://threejs.org/docs/#Reference/Objects/Mesh) and [Light](http://threejs.org/docs/#Reference/Lights/AmbientLight).", "markup": "markdown", "html": "<p>Could you elaborate a bit more on this structure? </p>\n<p>If I understand well (and I probably don't), what we currently have as <code>Visual</code> performs the function of both <code>Node</code> and <code>Visual</code>. That is, it might be just a visualization of something, like a box, or it might behave as a container for other visuals and not have a visual representation (geometry / material) of its own. Could you go into a bit more detail on how you intend to split the existing functionality?</p>\n<p>One thing that might be tedious but perhaps will save us time in the future is to list all classes that will be created and their relationships. For example, there will be a <code>Model</code> class which inherits from <code>Node</code>, right? How about all the visuals which get attached to a link, such as the \"visual visuals\", collision visuals, CoM, inertia, joints... Will these inherit from <code>Node</code> or from <code>Visual</code>? How will they be structured?</p>\n<p>Will a <code>Visual</code> have a single geometry or can it contain a lot of smaller geometries which are assembled together? For example, you mention that \"axis-arrows are cones and cylinders of a certain color and proportion, no matter the underlying render-engine\", I imagine this being a reference to the current <a data-is-external-link=\"true\" href=\"http://osrf-distributions.s3.amazonaws.com/gazebo/api/dev/classgazebo_1_1rendering_1_1ArrowVisual.html\" rel=\"nofollow\">ArrowVisual</a> class. Would a class like <code>ArrowVisual</code> inherit from <code>Node</code> and have two visuals, one for the cone and one for the cylinder, or would it inherit from <code>Visual</code> and have two geometries and their respective materials?</p>\n<p>It might be interesting to trace a parallel with the <a data-is-external-link=\"true\" href=\"http://osrf-distributions.s3.amazonaws.com/gazebo/api/dev/classgazebo_1_1physics_1_1Base.html\" rel=\"nofollow\">physics::Base</a> class and how it abstracts some functionality (or maybe it's not a good parallel...).</p>\n<p>Another thing that this reminded me of is the structure of <code>three.js</code>, the library we use on <a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/gzweb\" rel=\"nofollow\">GzWeb</a>. They have the <a data-is-external-link=\"true\" href=\"http://threejs.org/docs/#Reference/Core/Object3D\" rel=\"nofollow\">Object3D</a> class, which is the base for everything, from <a data-is-external-link=\"true\" href=\"http://threejs.org/docs/#Reference/Cameras/Camera\" rel=\"nofollow\">Camera</a> to <a data-is-external-link=\"true\" href=\"http://threejs.org/docs/#Reference/Objects/Mesh\" rel=\"nofollow\">Mesh</a> and <a data-is-external-link=\"true\" href=\"http://threejs.org/docs/#Reference/Lights/AmbientLight\" rel=\"nofollow\">Light</a>.</p>", "type": "rendered"}, "created_on": "2015-07-01T19:35:13.840688+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {}, "updated_on": "2015-07-01T19:41:07.142758+00:00", "type": "pullrequest_comment", "id": 7951300}, "pull_request": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/7947491.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-7947491"}}, "parent": {"id": 7947474, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/7947474.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-7947474"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}, "content": {"raw": "Thanks, yeah it looks better now :)", "markup": "markdown", "html": "<p>Thanks, yeah it looks better now :)</p>", "type": "rendered"}, "created_on": "2015-07-01T17:22:39.040131+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2015-07-01T17:22:39.049033+00:00", "type": "pullrequest_comment", "id": 7947491}, "pull_request": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/7947474.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-7947474"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}, "content": {"raw": "But thanks for the heads up on marking my repo public. Hopefully you can view the md file now.", "markup": "markdown", "html": "<p>But thanks for the heads up on marking my repo public. Hopefully you can view the md file now.</p>", "type": "rendered"}, "created_on": "2015-07-01T17:21:59.421870+00:00", "user": {"display_name": "MIke Kasper", "uuid": "{ccb25b19-dcb4-427e-a543-0819a90f1e03}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bccb25b19-dcb4-427e-a543-0819a90f1e03%7D"}, "html": {"href": "https://bitbucket.org/%7Bccb25b19-dcb4-427e-a543-0819a90f1e03%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7a569dea81978ffcfe79b403bc4f692cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMK-0.png"}}, "nickname": "mkaspr", "type": "user", "account_id": "557058:574b2f46-2e8e-4a43-94de-428c29610eaf"}, "updated_on": "2015-07-01T17:21:59.566206+00:00", "type": "pullrequest_comment", "id": 7947474}, "pull_request": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/7947404.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-7947404"}}, "parent": {"id": 7946930, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/7946930.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-7946930"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}, "content": {"raw": "woops, it was my browser, sorry for the noise", "markup": "markdown", "html": "<p>woops, it was my browser, sorry for the noise</p>", "type": "rendered"}, "created_on": "2015-07-01T17:19:35.963266+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2015-07-01T17:19:35.979488+00:00", "type": "pullrequest_comment", "id": 7947404}, "pull_request": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/7946930.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-7946930"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}, "content": {"raw": "3 of the images seem to be corrupt, could you update them?", "markup": "markdown", "html": "<p>3 of the images seem to be corrupt, could you update them?</p>", "type": "rendered"}, "created_on": "2015-07-01T17:00:19.206769+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2015-07-01T17:00:19.226512+00:00", "type": "pullrequest_comment", "id": 7946930}, "pull_request": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}}, {"update": {"description": "This document outlines the proposed design changes for replacing the direct calls to Ogre with a generic interface. The main goal is to allow other render-engines to be easily used in place of or in tandem with Ogre.", "title": "Abstracting Render-engine Interface in Gazebo", "destination": {"commit": {"hash": "cbceec0723d4", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_design/commit/cbceec0723d4.json"}, "html": {"href": "#!/osrf/gazebo_design/commits/cbceec0723d4"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_design.json"}, "html": {"href": "#!/osrf/gazebo_design"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d7bf1c81-183c-42cc-8760-b207a9a49991}ts=markdown"}}, "type": "repository", "name": "gazebo_design", "full_name": "osrf/gazebo_design", "uuid": "{d7bf1c81-183c-42cc-8760-b207a9a49991}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "5107b996a747", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mkaspr/gazebo_design/commit/5107b996a747"}, "html": {"href": "https://bitbucket.org/mkaspr/gazebo_design/commits/5107b996a747"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mkaspr/gazebo_design"}, "html": {"href": "https://bitbucket.org/mkaspr/gazebo_design"}, "avatar": {"href": "data/bytebucket.org/ravatar/{75f0a705-5bab-4a36-9928-f6f8aa947f3b}ts=markdown"}}, "type": "repository", "name": "gazebo_design", "full_name": "mkaspr/gazebo_design", "uuid": "{75f0a705-5bab-4a36-9928-f6f8aa947f3b}"}, "branch": {"name": "render_engine"}}, "state": "OPEN", "author": {"display_name": "MIke Kasper", "uuid": "{ccb25b19-dcb4-427e-a543-0819a90f1e03}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bccb25b19-dcb4-427e-a543-0819a90f1e03%7D"}, "html": {"href": "https://bitbucket.org/%7Bccb25b19-dcb4-427e-a543-0819a90f1e03%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7a569dea81978ffcfe79b403bc4f692cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMK-0.png"}}, "nickname": "mkaspr", "type": "user", "account_id": "557058:574b2f46-2e8e-4a43-94de-428c29610eaf"}, "date": "2015-06-30T00:14:59.335061+00:00"}, "pull_request": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}}, {"update": {"description": "This document outlines the proposed design changes for replacing the direct calls to Ogre with a generic interface. The main goal is to allow other render-engines to be easily used in place of or in tandem with Ogre.", "title": "Abstracting Render-engine Interface in Gazebo", "destination": {"commit": {"hash": "cbceec0723d4", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo_design/commit/cbceec0723d4.json"}, "html": {"href": "#!/osrf/gazebo_design/commits/cbceec0723d4"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo_design.json"}, "html": {"href": "#!/osrf/gazebo_design"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d7bf1c81-183c-42cc-8760-b207a9a49991}ts=markdown"}}, "type": "repository", "name": "gazebo_design", "full_name": "osrf/gazebo_design", "uuid": "{d7bf1c81-183c-42cc-8760-b207a9a49991}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "5107b996a747", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mkaspr/gazebo_design/commit/5107b996a747"}, "html": {"href": "https://bitbucket.org/mkaspr/gazebo_design/commits/5107b996a747"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mkaspr/gazebo_design"}, "html": {"href": "https://bitbucket.org/mkaspr/gazebo_design"}, "avatar": {"href": "data/bytebucket.org/ravatar/{75f0a705-5bab-4a36-9928-f6f8aa947f3b}ts=markdown"}}, "type": "repository", "name": "gazebo_design", "full_name": "mkaspr/gazebo_design", "uuid": "{75f0a705-5bab-4a36-9928-f6f8aa947f3b}"}, "branch": {"name": "render_engine"}}, "state": "OPEN", "author": {"display_name": "MIke Kasper", "uuid": "{ccb25b19-dcb4-427e-a543-0819a90f1e03}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bccb25b19-dcb4-427e-a543-0819a90f1e03%7D"}, "html": {"href": "https://bitbucket.org/%7Bccb25b19-dcb4-427e-a543-0819a90f1e03%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7a569dea81978ffcfe79b403bc4f692cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMK-0.png"}}, "nickname": "mkaspr", "type": "user", "account_id": "557058:574b2f46-2e8e-4a43-94de-428c29610eaf"}, "date": "2015-06-30T00:14:59.303314+00:00"}, "pull_request": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}}]}