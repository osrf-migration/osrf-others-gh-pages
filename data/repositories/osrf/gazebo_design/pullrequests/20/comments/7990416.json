{"links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/7990416.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_design/diff/mkaspr/gazebo_design:None..None?path=render_engine%2Frendering_uml4.png"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-7990416"}}, "parent": {"id": 7951300, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/7951300.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-7951300"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}, "content": {"raw": "Thanks for the feedback! Sorry for the delay, I had to think about this a bit.\n\nMy main reason for splitting the current `Visual` functionality into separate `Node` and `Visual` classes was to allow other elements like `Sensor` and `Light` to be added easily to models (think headlights on a car). At the moment, I believe `Light` objects can only be added directly to the `Scene` root node with a global pose. Alternatively, we could copy how `Camera` currently achieves this with its `TrackVisual` functionality. But I feel the proposed design would be cleaner.\n\nAs for the relationship between `Geometry` and `Visual`, you made some good points. The issue with my current design is that you cannot change the pose of `Geometry` directly. So there is no way to add multiple `Geometry` objects to a single `Visual`. Given this, I propose modifying the design slightly as follows:\n\n![uml5.png](data/bitbucket.org/repo/RgX9je/images/2300196190-uml5.png)\n\nHere we'd drop the `Geometry` class and instead have a `Visual` subclass for each primitive. The `ArrowVisual` would be a child of `CompositeVisual`. Implementations of `CompositeVisual` would maintain two data-structures: 1) the child `Node` list inherited from `Node` and 2) a separate list of private `Visual` objects. This would also make it easy to apply a `Material` to only the private `Visual` objects.\n\nThe proposed design also allows two possible \"empty\" nodes. There is a `EmptyVisual` class, as \"EMPTY\" is a geometry-type in SDF. Additionally, we provide a `Link` node. This has the ability to set the pose and add children as inherited from `Node` with no additional functionality or visuals.\n\nIf this approach currently sounds reasonable, I can spend the time to fully flesh out the UML diagram with all classes as you suggested.", "markup": "markdown", "html": "<p>Thanks for the feedback! Sorry for the delay, I had to think about this a bit.</p>\n<p>My main reason for splitting the current <code>Visual</code> functionality into separate <code>Node</code> and <code>Visual</code> classes was to allow other elements like <code>Sensor</code> and <code>Light</code> to be added easily to models (think headlights on a car). At the moment, I believe <code>Light</code> objects can only be added directly to the <code>Scene</code> root node with a global pose. Alternatively, we could copy how <code>Camera</code> currently achieves this with its <code>TrackVisual</code> functionality. But I feel the proposed design would be cleaner.</p>\n<p>As for the relationship between <code>Geometry</code> and <code>Visual</code>, you made some good points. The issue with my current design is that you cannot change the pose of <code>Geometry</code> directly. So there is no way to add multiple <code>Geometry</code> objects to a single <code>Visual</code>. Given this, I propose modifying the design slightly as follows:</p>\n<p><img alt=\"uml5.png\" src=\"data/bitbucket.org/repo/RgX9je/images/2300196190-uml5.png\" /></p>\n<p>Here we'd drop the <code>Geometry</code> class and instead have a <code>Visual</code> subclass for each primitive. The <code>ArrowVisual</code> would be a child of <code>CompositeVisual</code>. Implementations of <code>CompositeVisual</code> would maintain two data-structures: 1) the child <code>Node</code> list inherited from <code>Node</code> and 2) a separate list of private <code>Visual</code> objects. This would also make it easy to apply a <code>Material</code> to only the private <code>Visual</code> objects.</p>\n<p>The proposed design also allows two possible \"empty\" nodes. There is a <code>EmptyVisual</code> class, as \"EMPTY\" is a geometry-type in SDF. Additionally, we provide a <code>Link</code> node. This has the ability to set the pose and add children as inherited from <code>Node</code> with no additional functionality or visuals.</p>\n<p>If this approach currently sounds reasonable, I can spend the time to fully flesh out the UML diagram with all classes as you suggested.</p>", "type": "rendered"}, "created_on": "2015-07-02T22:00:33.747410+00:00", "user": {"display_name": "MIke Kasper", "uuid": "{ccb25b19-dcb4-427e-a543-0819a90f1e03}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bccb25b19-dcb4-427e-a543-0819a90f1e03%7D"}, "html": {"href": "https://bitbucket.org/%7Bccb25b19-dcb4-427e-a543-0819a90f1e03%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7a569dea81978ffcfe79b403bc4f692cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMK-0.png"}}, "nickname": "mkaspr", "type": "user", "account_id": "557058:574b2f46-2e8e-4a43-94de-428c29610eaf"}, "inline": {"to": null, "from": null, "outdated": false, "path": "render_engine/rendering_uml4.png"}, "updated_on": "2015-07-02T22:00:33.849151+00:00", "type": "pullrequest_comment", "id": 7990416}