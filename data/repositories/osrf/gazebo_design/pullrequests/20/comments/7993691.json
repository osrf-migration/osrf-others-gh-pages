{"links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/7993691.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_design/diff/mkaspr/gazebo_design:None..None?path=render_engine%2Frender_engine.md"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-7993691"}}, "parent": {"id": 7992403, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20/comments/7992403.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20/_/diff#comment-7992403"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/20.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/20"}}, "title": "Abstracting Render-engine Interface in Gazebo"}, "content": {"raw": "I've implemented basic functionality in OptiX and almost finished doing the same with Ogre. However I'm only compiling the rendering > sensors > plugins pipeline. Neither deal with the GUI side of things yet, where the a lot of the Ogre-specific code is hiding.\n\nIt would certainly be good to compare performance between the old and new Ogre implementations, to see how much of a hit we're taking. As for the managing multiple scenes, I've also implemented a solution that I believe should address the issue, but perhaps it warrants a design PR of its own. And as for fine-tuning against a generic API, there are already a few issues that I'm scratching my head about, namely selecting OptiX's acceleration structure types and the use of theoretical primitives (no tessellation).", "markup": "markdown", "html": "<p>I've implemented basic functionality in OptiX and almost finished doing the same with Ogre. However I'm only compiling the rendering &gt; sensors &gt; plugins pipeline. Neither deal with the GUI side of things yet, where the a lot of the Ogre-specific code is hiding.</p>\n<p>It would certainly be good to compare performance between the old and new Ogre implementations, to see how much of a hit we're taking. As for the managing multiple scenes, I've also implemented a solution that I believe should address the issue, but perhaps it warrants a design PR of its own. And as for fine-tuning against a generic API, there are already a few issues that I'm scratching my head about, namely selecting OptiX's acceleration structure types and the use of theoretical primitives (no tessellation).</p>", "type": "rendered"}, "created_on": "2015-07-03T02:55:15.771213+00:00", "user": {"display_name": "MIke Kasper", "uuid": "{ccb25b19-dcb4-427e-a543-0819a90f1e03}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bccb25b19-dcb4-427e-a543-0819a90f1e03%7D"}, "html": {"href": "https://bitbucket.org/%7Bccb25b19-dcb4-427e-a543-0819a90f1e03%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7a569dea81978ffcfe79b403bc4f692cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMK-0.png"}}, "nickname": "mkaspr", "type": "user", "account_id": "557058:574b2f46-2e8e-4a43-94de-428c29610eaf"}, "inline": {"to": null, "from": null, "outdated": false, "path": "render_engine/render_engine.md"}, "updated_on": "2015-07-03T02:55:15.908897+00:00", "type": "pullrequest_comment", "id": 7993691}