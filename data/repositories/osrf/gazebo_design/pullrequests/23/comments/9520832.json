{"links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/23/comments/9520832.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_design/diff/osrf/gazebo_design:3696c442e8e1..b98e73d46b32?path=sdf_reference_geometry%2Fframe_tree.png"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/23/_/diff#comment-9520832"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 23, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/23.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/23"}}, "title": "Sdf_reference_geometry"}, "content": {"raw": "Looking at this, something doesn't feel intuitive or flexible enough. The fact that you must, within link 3, define its own frame `l3frame` with respect to `l3j2frame` means the user must know that joint 2 frame will be closer to the root of the model than joint 3. If the user by any chance decides to flip link 3 to have `l3j2frame` attach to joint 3 and `l3j3frame` attach to joint 2, they have to recalculate all link 3 frames by hand because now the \"base\" of the link is `l3j3frame`. At least as far as I understand it, adding reference frames was supposed to make this sort of thing easier...\n\n**Basically, I'd like to define all frames inside a link with respect to the link frame and don't need to change it according to the way the link is attached.**\n\nI haven't thought this through yet, but one way of doing this might be by rethinking joints. Currently a joint pose is always specified with respect to the child link. This design so far suggests loosening this and allowing you to specify another frame within a link, which is nice. But this only fixes one half of the problem. The joint connects 2 links, so it would be nice if it connected 2 random frames. Something like this pseudo-SDF:\n\n~~~\n<model>\n  <link name=\"link1\">\n    <frame name =\"link1_origin\" />\n    <frame name =\"attachment_A\" pose_frame=\"link1_origin\" />\n    <frame name =\"attachment_B\" pose_frame=\"link1_origin\" />\n  </link>\n  <link name=\"link2\">\n    <frame name =\"link2_origin\" />\n    <frame name =\"attachment_A\" pose_frame=\"link2_origin\" />\n    <frame name =\"attachment_B\" pose_frame=\"link2_origin\" />\n  </link>\n  <joint name=\"joint1\">\n    <parent>link1::attachment_A</parent>\n    <child>link2::attachment_B</child>\n    <pose frame=\"link2::attachment_B\" />\n  </joint>\n</model>\n~~~\n\nAgain, I haven't thought this through. But I imagine that on the physics side, the joint parent and child would still be links. But when parsing poses, the links' internal frames would be used.", "markup": "markdown", "html": "<p>Looking at this, something doesn't feel intuitive or flexible enough. The fact that you must, within link 3, define its own frame <code>l3frame</code> with respect to <code>l3j2frame</code> means the user must know that joint 2 frame will be closer to the root of the model than joint 3. If the user by any chance decides to flip link 3 to have <code>l3j2frame</code> attach to joint 3 and <code>l3j3frame</code> attach to joint 2, they have to recalculate all link 3 frames by hand because now the \"base\" of the link is <code>l3j3frame</code>. At least as far as I understand it, adding reference frames was supposed to make this sort of thing easier...</p>\n<p><strong>Basically, I'd like to define all frames inside a link with respect to the link frame and don't need to change it according to the way the link is attached.</strong></p>\n<p>I haven't thought this through yet, but one way of doing this might be by rethinking joints. Currently a joint pose is always specified with respect to the child link. This design so far suggests loosening this and allowing you to specify another frame within a link, which is nice. But this only fixes one half of the problem. The joint connects 2 links, so it would be nice if it connected 2 random frames. Something like this pseudo-SDF:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">&lt;model&gt;</span>\n  <span class=\"nt\">&lt;link</span> <span class=\"na\">name=</span><span class=\"s\">&quot;link1&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;frame</span> <span class=\"na\">name =</span><span class=\"s\">&quot;link1_origin&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;frame</span> <span class=\"na\">name =</span><span class=\"s\">&quot;attachment_A&quot;</span> <span class=\"na\">pose_frame=</span><span class=\"s\">&quot;link1_origin&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;frame</span> <span class=\"na\">name =</span><span class=\"s\">&quot;attachment_B&quot;</span> <span class=\"na\">pose_frame=</span><span class=\"s\">&quot;link1_origin&quot;</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/link&gt;</span>\n  <span class=\"nt\">&lt;link</span> <span class=\"na\">name=</span><span class=\"s\">&quot;link2&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;frame</span> <span class=\"na\">name =</span><span class=\"s\">&quot;link2_origin&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;frame</span> <span class=\"na\">name =</span><span class=\"s\">&quot;attachment_A&quot;</span> <span class=\"na\">pose_frame=</span><span class=\"s\">&quot;link2_origin&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;frame</span> <span class=\"na\">name =</span><span class=\"s\">&quot;attachment_B&quot;</span> <span class=\"na\">pose_frame=</span><span class=\"s\">&quot;link2_origin&quot;</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/link&gt;</span>\n  <span class=\"nt\">&lt;joint</span> <span class=\"na\">name=</span><span class=\"s\">&quot;joint1&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;parent&gt;</span>link1::attachment_A<span class=\"nt\">&lt;/parent&gt;</span>\n    <span class=\"nt\">&lt;child&gt;</span>link2::attachment_B<span class=\"nt\">&lt;/child&gt;</span>\n    <span class=\"nt\">&lt;pose</span> <span class=\"na\">frame=</span><span class=\"s\">&quot;link2::attachment_B&quot;</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/joint&gt;</span>\n<span class=\"nt\">&lt;/model&gt;</span>\n</pre></div>\n\n\n<p>Again, I haven't thought this through. But I imagine that on the physics side, the joint parent and child would still be links. But when parsing poses, the links' internal frames would be used.</p>", "type": "rendered"}, "created_on": "2015-08-31T19:42:30.423288+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {"to": null, "from": null, "outdated": false, "path": "sdf_reference_geometry/frame_tree.png"}, "updated_on": "2015-08-31T19:42:30.431622+00:00", "type": "pullrequest_comment", "id": 9520832}