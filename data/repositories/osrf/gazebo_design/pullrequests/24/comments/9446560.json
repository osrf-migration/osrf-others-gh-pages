{"links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/24/comments/9446560.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo_design/diff/osrf/gazebo_design:None..None?path=undo%2Fundo.md"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/24/_/diff#comment-9446560"}}, "parent": {"id": 9444164, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/24/comments/9444164.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/24/_/diff#comment-9444164"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 24, "links": {"self": {"href": "data/repositories/osrf/gazebo_design/pullrequests/24.json"}, "html": {"href": "#!/osrf/gazebo_design/pull-requests/24"}}, "title": "Undo"}, "content": {"raw": "Yes, I see what you're saying. But still, I feel like we're trying to mix up two sets of features here. \n\nOne thing is to undo the user's command, another thing is to go back to a known good state or rewind the simulation. Going back in time would indeed be very very useful, but I feel like it should be its own feature.\n\n* If we introduce an undo which goes back in time, people might wish they could go back in time, but they can't because they didn't edit the scene and don't have saved keyframes, which might be frustrating and even confusing. Then people would start to make tricks to save keyframes, like editing the scene slightly to have a point to go back to. \n\n* It can be counter intuitive for the scene to go back to a previous state but the time doesn't go back.\n\n* Saving keyframes at every single user command will bring big performance issues.\n\n* If undo goes to a previous keyframe, I feel like redo must do the same and also skip forward to the keyframe when undo was triggered. Otherwise you can't \"undo the undo\". Imagine a user moved something and then after 10 mins of simulation they hit Ctrl+Z by mistake. The whole thing gets rewinded and unless redo jumps all the way forward, you lost all those 10 mins. \n\n    This anecdote brings the conclusion that **undo and redo really should be the inverse of each other**. So let's say redo also jumps to a future keyframe. If we have undo and redo just jumping from a keyframe to another without any concept of what the user command was, I think we're trying to implement a keyframe jumping feature, not really undo anymore. \n    \n    The proposal in this design is an attempt of keeping undo and redo the inverse of each other at least locally. \n\nBack at your original anecdote, I really understand your concern and I don't have a good solution for it. I feel like if it was me editing a highly dynamic world where things might move around, I would pause the simulation first. With the simulation paused, the local undo proposed here works fine. But we can't expect users to always do that. \n\nAnother thing which I've been thinking about is having a simulation play mode separate from a simulation edit mode. This way we force users to manipulate the scene in a paused state.\n\n", "markup": "markdown", "html": "<p>Yes, I see what you're saying. But still, I feel like we're trying to mix up two sets of features here. </p>\n<p>One thing is to undo the user's command, another thing is to go back to a known good state or rewind the simulation. Going back in time would indeed be very very useful, but I feel like it should be its own feature.</p>\n<ul>\n<li>\n<p>If we introduce an undo which goes back in time, people might wish they could go back in time, but they can't because they didn't edit the scene and don't have saved keyframes, which might be frustrating and even confusing. Then people would start to make tricks to save keyframes, like editing the scene slightly to have a point to go back to. </p>\n</li>\n<li>\n<p>It can be counter intuitive for the scene to go back to a previous state but the time doesn't go back.</p>\n</li>\n<li>\n<p>Saving keyframes at every single user command will bring big performance issues.</p>\n</li>\n<li>\n<p>If undo goes to a previous keyframe, I feel like redo must do the same and also skip forward to the keyframe when undo was triggered. Otherwise you can't \"undo the undo\". Imagine a user moved something and then after 10 mins of simulation they hit Ctrl+Z by mistake. The whole thing gets rewinded and unless redo jumps all the way forward, you lost all those 10 mins. </p>\n<p>This anecdote brings the conclusion that <strong>undo and redo really should be the inverse of each other</strong>. So let's say redo also jumps to a future keyframe. If we have undo and redo just jumping from a keyframe to another without any concept of what the user command was, I think we're trying to implement a keyframe jumping feature, not really undo anymore. </p>\n<p>The proposal in this design is an attempt of keeping undo and redo the inverse of each other at least locally. </p>\n</li>\n</ul>\n<p>Back at your original anecdote, I really understand your concern and I don't have a good solution for it. I feel like if it was me editing a highly dynamic world where things might move around, I would pause the simulation first. With the simulation paused, the local undo proposed here works fine. But we can't expect users to always do that. </p>\n<p>Another thing which I've been thinking about is having a simulation play mode separate from a simulation edit mode. This way we force users to manipulate the scene in a paused state.</p>", "type": "rendered"}, "created_on": "2015-08-27T17:44:06.184039+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {"to": null, "from": null, "outdated": false, "path": "undo/undo.md"}, "updated_on": "2015-08-27T17:44:06.192010+00:00", "type": "pullrequest_comment", "id": 9446560}