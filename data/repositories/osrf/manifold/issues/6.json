{"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/osrf/manifold.json"}, "html": {"href": "#!/osrf/manifold"}, "avatar": {"href": "data/bytebucket.org/ravatar/{95277805-c4cc-45bf-b4bb-ad6091e930a7}ts=c_plus_plus"}}, "type": "repository", "name": "manifold", "full_name": "osrf/manifold", "uuid": "{95277805-c4cc-45bf-b4bb-ad6091e930a7}"}, "links": {"attachments": {"href": "data/repositories/osrf/manifold/issues/6/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/manifold/issues/6.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/manifold/issues/6/watch"}, "comments": {"href": "data/repositories/osrf/manifold/issues/6/comments_page=1.json"}, "html": {"href": "#!/osrf/manifold/issues/6/evaluate-integration-of-waypoints-and"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/manifold/issues/6/vote"}}, "reporter": {"display_name": "Agustin Alba Chicar", "uuid": "{8bdb6c14-4455-4664-9346-942102361f75}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8bdb6c14-4455-4664-9346-942102361f75%7D"}, "html": {"href": "https://bitbucket.org/%7B8bdb6c14-4455-4664-9346-942102361f75%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:53e8cbc5-23f1-4d62-aaaf-4a25ebc31c8f/07535b33-5cf2-4e10-bcd5-38bf6b994a6a/128"}}, "nickname": "agalbachicar", "type": "user", "account_id": "557058:53e8cbc5-23f1-4d62-aaaf-4a25ebc31c8f"}, "title": "Evaluate integration of waypoints and lanes to the graph", "component": null, "votes": 0, "watches": 1, "content": {"raw": "These are two use cases where we will benefit from having the Waypoints and Lanes inside the Graph structure.\r\n\r\n1. When building the junctions, we iterate through the lanes and the perimeters to get the exits and entries. Then, we have to get the reference to the waypoints to get its location.\r\n2. When sending information to the Box plugin, and getting the waypoints of a complete lane and its exits.\r\n\r\nIn both cases, we need to call some functions like the following:\r\n\r\n\r\n```\r\n#!c++\r\n\r\nmanifold::rndf::Waypoint DynamicRender::GetWaypointByUniqueId(\r\n  const manifold::rndf::UniqueId &waypointId) {\r\n  try {\r\n    return GetWaypointInSegmentsByUniqueId(waypointId);\r\n  }\r\n  catch(gazebo::common::Exception &e) {\r\n  }\r\n  return GetWaypointInZonesByUniqueId(waypointId);\r\n}\r\n\r\nmanifold::rndf::Waypoint DynamicRender::GetWaypointInSegmentsByUniqueId(\r\n  const manifold::rndf::UniqueId &waypointId) {\r\n  std::vector<manifold::rndf::Segment> &segments =\r\n  rndfInfo->Segments();\r\n  for (uint i = 0; i < segments.size(); i++) {\r\n    manifold::rndf::Segment &segment = segments[i];\r\n    if (segment.Id() != waypointId.X())\r\n      continue;\r\n    std::vector<manifold::rndf::Lane> &lanes =\r\n      segment.Lanes();\r\n    for (uint j = 0; j < lanes.size(); j++) {\r\n      manifold::rndf::Lane &lane = lanes[j];\r\n      if (lane.Id() != waypointId.Y())\r\n        continue;\r\n      std::vector<manifold::rndf::Waypoint> waypoints =\r\n        lane.Waypoints();\r\n      for (uint k = 0; k < waypoints.size(); k++) {\r\n        manifold::rndf::Waypoint &waypoint = waypoints[k];\r\n        if (waypoint.Id() == waypointId.Z())\r\n          return waypoint;\r\n      }\r\n      gzthrow(\"Error. Waypoint \" +\r\n        createWaypointName(waypointId.X(),\r\n          waypointId.Y(),\r\n          waypointId.Z()) +\r\n        \" has not been found in segments.\");\r\n    }\r\n    gzthrow(\"Error. Waypoint \" +\r\n      createWaypointName(waypointId.X(),\r\n        waypointId.Y(),\r\n        waypointId.Z()) +\r\n      \" has not been found in segments.\");\r\n  }\r\n  gzthrow(\"Error. Waypoint \" +\r\n    createWaypointName(waypointId.X(),\r\n      waypointId.Y(),\r\n      waypointId.Z()) +\r\n    \" has not been found in segments.\");\r\n}\r\n\r\nmanifold::rndf::Waypoint DynamicRender::GetWaypointInZonesByUniqueId(\r\n  const manifold::rndf::UniqueId &waypointId) {\r\n  if (waypointId.Y() != 0) {\r\n    gzthrow(\"Error. Waypoint \" +\r\n      createWaypointName(waypointId.X(),\r\n        waypointId.Y(),\r\n        waypointId.Z()) +\r\n      \" has not been found in zones.\");\r\n  }\r\n  std::vector<manifold::rndf::Zone> &zones =\r\n  rndfInfo->Zones();\r\n  for (uint i = 0; i < zones.size(); i++) {\r\n    manifold::rndf::Zone &zone = zones[i];\r\n    if (zone.Id() != waypointId.X())\r\n      continue;\r\n    manifold::rndf::Perimeter &perimeter =\r\n      zone.Perimeter();\r\n    std::vector<manifold::rndf::Waypoint> &waypoints =\r\n      perimeter.Points();\r\n    for (uint j = 0; j < waypoints.size(); j++) {\r\n      manifold::rndf::Waypoint waypoint =\r\n        waypoints[j];\r\n      if (waypoint.Id() == waypointId.Z())\r\n        return waypoint;\r\n    }\r\n    gzthrow(\"Error. Waypoint \" +\r\n      createWaypointName(waypointId.X(),\r\n        waypointId.Y(),\r\n        waypointId.Z()) +\r\n      \" has not been found in zones.\");\r\n  }\r\n  gzthrow(\"Error. Waypoint \" +\r\n    createWaypointName(waypointId.X(),\r\n      waypointId.Y(),\r\n      waypointId.Z()) +\r\n    \" has not been found in zones.\");\r\n}\r\n\r\nmanifold::rndf::Lane* DynamicRender::GetLaneByUniqueId(\r\n  const manifold::rndf::UniqueId &waypointId) {\r\n  std::vector<manifold::rndf::Segment> &segments =\r\n  rndfInfo->Segments();\r\n  for (uint i = 0; i < segments.size(); i++) {\r\n    manifold::rndf::Segment &segment = segments[i];\r\n    if (segment.Id() != waypointId.X())\r\n      continue;\r\n    std::vector<manifold::rndf::Lane> &lanes =\r\n      segment.Lanes();\r\n    for (uint j = 0; j < lanes.size(); j++) {\r\n      manifold::rndf::Lane &lane = lanes[j];\r\n      if (lane.Id() != waypointId.Y())\r\n        continue;\r\n      std::vector<manifold::rndf::Waypoint> waypoints =\r\n        lane.Waypoints();\r\n      for (uint k = 0; k < waypoints.size(); k++) {\r\n        manifold::rndf::Waypoint &waypoint = waypoints[k];\r\n        if (waypoint.Id() == waypointId.Z())\r\n          return &lane;\r\n      }\r\n      return NULL;\r\n    }\r\n    return NULL;\r\n  }\r\n  return NULL;\r\n}\r\n```\r\nTo see these functions in context, please refer to the following [link](https://bitbucket.org/JChoclin/rndf_gazebo_plugin/src/7a229dec41d453d09fbe04c114193a2e8e6bb022/src/rndf_gazebo_plugin.cc?fileviewer=file-view-default#rndf_gazebo_plugin.cc-169). As you can see we need to iterate through the whole structure of segments and/or zones to reach a lane.\r\n\r\nI mention @andres_fortier so he is notified with the discussion.", "markup": "markdown", "html": "<p>These are two use cases where we will benefit from having the Waypoints and Lanes inside the Graph structure.</p>\n<ol>\n<li>When building the junctions, we iterate through the lanes and the perimeters to get the exits and entries. Then, we have to get the reference to the waypoints to get its location.</li>\n<li>When sending information to the Box plugin, and getting the waypoints of a complete lane and its exits.</li>\n</ol>\n<p>In both cases, we need to call some functions like the following:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Waypoint</span> <span class=\"n\">DynamicRender</span><span class=\"o\">::</span><span class=\"n\">GetWaypointByUniqueId</span><span class=\"p\">(</span>\n  <span class=\"k\">const</span> <span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">UniqueId</span> <span class=\"o\">&amp;</span><span class=\"n\">waypointId</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">try</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">GetWaypointInSegmentsByUniqueId</span><span class=\"p\">(</span><span class=\"n\">waypointId</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"n\">gazebo</span><span class=\"o\">::</span><span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">Exception</span> <span class=\"o\">&amp;</span><span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"n\">GetWaypointInZonesByUniqueId</span><span class=\"p\">(</span><span class=\"n\">waypointId</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Waypoint</span> <span class=\"n\">DynamicRender</span><span class=\"o\">::</span><span class=\"n\">GetWaypointInSegmentsByUniqueId</span><span class=\"p\">(</span>\n  <span class=\"k\">const</span> <span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">UniqueId</span> <span class=\"o\">&amp;</span><span class=\"n\">waypointId</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Segment</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">segments</span> <span class=\"o\">=</span>\n  <span class=\"n\">rndfInfo</span><span class=\"o\">-&gt;</span><span class=\"n\">Segments</span><span class=\"p\">();</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">uint</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">segments</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Segment</span> <span class=\"o\">&amp;</span><span class=\"n\">segment</span> <span class=\"o\">=</span> <span class=\"n\">segments</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">segment</span><span class=\"p\">.</span><span class=\"n\">Id</span><span class=\"p\">()</span> <span class=\"o\">!=</span> <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">X</span><span class=\"p\">())</span>\n      <span class=\"k\">continue</span><span class=\"p\">;</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Lane</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">lanes</span> <span class=\"o\">=</span>\n      <span class=\"n\">segment</span><span class=\"p\">.</span><span class=\"n\">Lanes</span><span class=\"p\">();</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">uint</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">lanes</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Lane</span> <span class=\"o\">&amp;</span><span class=\"n\">lane</span> <span class=\"o\">=</span> <span class=\"n\">lanes</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">];</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">lane</span><span class=\"p\">.</span><span class=\"n\">Id</span><span class=\"p\">()</span> <span class=\"o\">!=</span> <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Y</span><span class=\"p\">())</span>\n        <span class=\"k\">continue</span><span class=\"p\">;</span>\n      <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Waypoint</span><span class=\"o\">&gt;</span> <span class=\"n\">waypoints</span> <span class=\"o\">=</span>\n        <span class=\"n\">lane</span><span class=\"p\">.</span><span class=\"n\">Waypoints</span><span class=\"p\">();</span>\n      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">uint</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">waypoints</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">k</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Waypoint</span> <span class=\"o\">&amp;</span><span class=\"n\">waypoint</span> <span class=\"o\">=</span> <span class=\"n\">waypoints</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">];</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">waypoint</span><span class=\"p\">.</span><span class=\"n\">Id</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Z</span><span class=\"p\">())</span>\n          <span class=\"k\">return</span> <span class=\"n\">waypoint</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"n\">gzthrow</span><span class=\"p\">(</span><span class=\"s\">&quot;Error. Waypoint &quot;</span> <span class=\"o\">+</span>\n        <span class=\"n\">createWaypointName</span><span class=\"p\">(</span><span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">X</span><span class=\"p\">(),</span>\n          <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Y</span><span class=\"p\">(),</span>\n          <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Z</span><span class=\"p\">())</span> <span class=\"o\">+</span>\n        <span class=\"s\">&quot; has not been found in segments.&quot;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">gzthrow</span><span class=\"p\">(</span><span class=\"s\">&quot;Error. Waypoint &quot;</span> <span class=\"o\">+</span>\n      <span class=\"n\">createWaypointName</span><span class=\"p\">(</span><span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">X</span><span class=\"p\">(),</span>\n        <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Y</span><span class=\"p\">(),</span>\n        <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Z</span><span class=\"p\">())</span> <span class=\"o\">+</span>\n      <span class=\"s\">&quot; has not been found in segments.&quot;</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"n\">gzthrow</span><span class=\"p\">(</span><span class=\"s\">&quot;Error. Waypoint &quot;</span> <span class=\"o\">+</span>\n    <span class=\"n\">createWaypointName</span><span class=\"p\">(</span><span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">X</span><span class=\"p\">(),</span>\n      <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Y</span><span class=\"p\">(),</span>\n      <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Z</span><span class=\"p\">())</span> <span class=\"o\">+</span>\n    <span class=\"s\">&quot; has not been found in segments.&quot;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Waypoint</span> <span class=\"n\">DynamicRender</span><span class=\"o\">::</span><span class=\"n\">GetWaypointInZonesByUniqueId</span><span class=\"p\">(</span>\n  <span class=\"k\">const</span> <span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">UniqueId</span> <span class=\"o\">&amp;</span><span class=\"n\">waypointId</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Y</span><span class=\"p\">()</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">gzthrow</span><span class=\"p\">(</span><span class=\"s\">&quot;Error. Waypoint &quot;</span> <span class=\"o\">+</span>\n      <span class=\"n\">createWaypointName</span><span class=\"p\">(</span><span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">X</span><span class=\"p\">(),</span>\n        <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Y</span><span class=\"p\">(),</span>\n        <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Z</span><span class=\"p\">())</span> <span class=\"o\">+</span>\n      <span class=\"s\">&quot; has not been found in zones.&quot;</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Zone</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">zones</span> <span class=\"o\">=</span>\n  <span class=\"n\">rndfInfo</span><span class=\"o\">-&gt;</span><span class=\"n\">Zones</span><span class=\"p\">();</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">uint</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">zones</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Zone</span> <span class=\"o\">&amp;</span><span class=\"n\">zone</span> <span class=\"o\">=</span> <span class=\"n\">zones</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">zone</span><span class=\"p\">.</span><span class=\"n\">Id</span><span class=\"p\">()</span> <span class=\"o\">!=</span> <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">X</span><span class=\"p\">())</span>\n      <span class=\"k\">continue</span><span class=\"p\">;</span>\n    <span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Perimeter</span> <span class=\"o\">&amp;</span><span class=\"n\">perimeter</span> <span class=\"o\">=</span>\n      <span class=\"n\">zone</span><span class=\"p\">.</span><span class=\"n\">Perimeter</span><span class=\"p\">();</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Waypoint</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">waypoints</span> <span class=\"o\">=</span>\n      <span class=\"n\">perimeter</span><span class=\"p\">.</span><span class=\"n\">Points</span><span class=\"p\">();</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">uint</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">waypoints</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Waypoint</span> <span class=\"n\">waypoint</span> <span class=\"o\">=</span>\n        <span class=\"n\">waypoints</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">];</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">waypoint</span><span class=\"p\">.</span><span class=\"n\">Id</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Z</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span> <span class=\"n\">waypoint</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">gzthrow</span><span class=\"p\">(</span><span class=\"s\">&quot;Error. Waypoint &quot;</span> <span class=\"o\">+</span>\n      <span class=\"n\">createWaypointName</span><span class=\"p\">(</span><span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">X</span><span class=\"p\">(),</span>\n        <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Y</span><span class=\"p\">(),</span>\n        <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Z</span><span class=\"p\">())</span> <span class=\"o\">+</span>\n      <span class=\"s\">&quot; has not been found in zones.&quot;</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"n\">gzthrow</span><span class=\"p\">(</span><span class=\"s\">&quot;Error. Waypoint &quot;</span> <span class=\"o\">+</span>\n    <span class=\"n\">createWaypointName</span><span class=\"p\">(</span><span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">X</span><span class=\"p\">(),</span>\n      <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Y</span><span class=\"p\">(),</span>\n      <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Z</span><span class=\"p\">())</span> <span class=\"o\">+</span>\n    <span class=\"s\">&quot; has not been found in zones.&quot;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Lane</span><span class=\"o\">*</span> <span class=\"n\">DynamicRender</span><span class=\"o\">::</span><span class=\"n\">GetLaneByUniqueId</span><span class=\"p\">(</span>\n  <span class=\"k\">const</span> <span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">UniqueId</span> <span class=\"o\">&amp;</span><span class=\"n\">waypointId</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Segment</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">segments</span> <span class=\"o\">=</span>\n  <span class=\"n\">rndfInfo</span><span class=\"o\">-&gt;</span><span class=\"n\">Segments</span><span class=\"p\">();</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">uint</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">segments</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Segment</span> <span class=\"o\">&amp;</span><span class=\"n\">segment</span> <span class=\"o\">=</span> <span class=\"n\">segments</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">segment</span><span class=\"p\">.</span><span class=\"n\">Id</span><span class=\"p\">()</span> <span class=\"o\">!=</span> <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">X</span><span class=\"p\">())</span>\n      <span class=\"k\">continue</span><span class=\"p\">;</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Lane</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">lanes</span> <span class=\"o\">=</span>\n      <span class=\"n\">segment</span><span class=\"p\">.</span><span class=\"n\">Lanes</span><span class=\"p\">();</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">uint</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">lanes</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Lane</span> <span class=\"o\">&amp;</span><span class=\"n\">lane</span> <span class=\"o\">=</span> <span class=\"n\">lanes</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">];</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">lane</span><span class=\"p\">.</span><span class=\"n\">Id</span><span class=\"p\">()</span> <span class=\"o\">!=</span> <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Y</span><span class=\"p\">())</span>\n        <span class=\"k\">continue</span><span class=\"p\">;</span>\n      <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Waypoint</span><span class=\"o\">&gt;</span> <span class=\"n\">waypoints</span> <span class=\"o\">=</span>\n        <span class=\"n\">lane</span><span class=\"p\">.</span><span class=\"n\">Waypoints</span><span class=\"p\">();</span>\n      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">uint</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">waypoints</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">k</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Waypoint</span> <span class=\"o\">&amp;</span><span class=\"n\">waypoint</span> <span class=\"o\">=</span> <span class=\"n\">waypoints</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">];</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">waypoint</span><span class=\"p\">.</span><span class=\"n\">Id</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Z</span><span class=\"p\">())</span>\n          <span class=\"k\">return</span> <span class=\"o\">&amp;</span><span class=\"n\">lane</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>To see these functions in context, please refer to the following <a data-is-external-link=\"true\" href=\"https://bitbucket.org/JChoclin/rndf_gazebo_plugin/src/7a229dec41d453d09fbe04c114193a2e8e6bb022/src/rndf_gazebo_plugin.cc?fileviewer=file-view-default#rndf_gazebo_plugin.cc-169\" rel=\"nofollow\">link</a>. As you can see we need to iterate through the whole structure of segments and/or zones to reach a lane.</p>\n<p>I mention @andres_fortier so he is notified with the discussion.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-01-13T19:22:44.719752+00:00", "milestone": null, "updated_on": "2017-02-02T14:52:31.241164+00:00", "type": "issue", "id": 6}