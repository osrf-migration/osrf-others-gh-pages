{"pagelen": 100, "values": [{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/manifold.json"}, "html": {"href": "#!/osrf/manifold"}, "avatar": {"href": "data/bytebucket.org/ravatar/{95277805-c4cc-45bf-b4bb-ad6091e930a7}ts=c_plus_plus"}}, "type": "repository", "name": "manifold", "full_name": "osrf/manifold", "uuid": "{95277805-c4cc-45bf-b4bb-ad6091e930a7}"}, "links": {"attachments": {"href": "data/repositories/osrf/manifold/issues/1/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/manifold/issues/1.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/manifold/issues/1/watch"}, "comments": {"href": "data/repositories/osrf/manifold/issues/1/comments_page=1.json"}, "html": {"href": "#!/osrf/manifold/issues/1/zones-and-spots-parsing"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/manifold/issues/1/vote"}}, "reporter": {"display_name": "Agustin Alba Chicar", "uuid": "{8bdb6c14-4455-4664-9346-942102361f75}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8bdb6c14-4455-4664-9346-942102361f75%7D"}, "html": {"href": "https://bitbucket.org/%7B8bdb6c14-4455-4664-9346-942102361f75%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:53e8cbc5-23f1-4d62-aaaf-4a25ebc31c8f/07535b33-5cf2-4e10-bcd5-38bf6b994a6a/128"}}, "nickname": "agalbachicar", "type": "user", "account_id": "557058:53e8cbc5-23f1-4d62-aaaf-4a25ebc31c8f"}, "title": "Zones and spots parsing", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Using Darpa RNDF file example, I've found some issues parsing the zone 14 part of the file. To make it pass, removal of the zone 14 and linked waypoints was necessary. Execution ends with gazebo::common:exception.\r\n\r\nThe original file can be found [here](https://github.com/ekumenlabs/terminus/blob/master/samples/rndf/darpa.rndf).\r\n\r\nThe file modified to be parsed can be found [here](https://bitbucket.org/agalbachicar/rndf_gazebo_plugin/src/27c0fc290d95e15e36f0971df256220c378697e0/example/darpa.rndf?at=Issue%2F%2315_Change_waypoint_shape&fileviewer=file-view-default).\r\n\r\nThe error message thrown is the following:\r\n\r\n\r\n```\r\n#!bash\r\n\r\n--File path: ../../src/samples/rndf/darpa.rndf\r\n--Print waypoints: 1\r\n--Print lanes: 1\r\n[Line 329]: Unable to parse segment header element\r\n \"segment_name  Nebraska_St     /*parking lot entrance road*/   \"\r\n[Err] [rndf_gazebo_plugin.cc:100] EXCEPTION: File [../../src/samples/rndf/darpa.rndf] is invalid\r\n\r\nterminate called after throwing an instance of 'gazebo::common::Exception'\r\nAborted (core dumped)\r\n```\r\n\r\nAfter removing the comment:\r\n\r\n\r\n```\r\n#!bash\r\n\r\n--File path: ../../src/samples/rndf/darpa2.rndf\r\n--Print waypoints: 1\r\n--Print lanes: 1\r\n[Line 400]: Unable to parse spot header element.\r\n \"spot_width    16              \"\r\n[Err] [rndf_gazebo_plugin.cc:100] EXCEPTION: File [../../src/samples/rndf/darpa2.rndf] is invalid\r\n\r\nterminate called after throwing an instance of 'gazebo::common::Exception'\r\nAborted (core dumped)\r\n```\r\n\r\n", "markup": "markdown", "html": "<p>Using Darpa RNDF file example, I've found some issues parsing the zone 14 part of the file. To make it pass, removal of the zone 14 and linked waypoints was necessary. Execution ends with gazebo::common:exception.</p>\n<p>The original file can be found <a data-is-external-link=\"true\" href=\"https://github.com/ekumenlabs/terminus/blob/master/samples/rndf/darpa.rndf\" rel=\"nofollow\">here</a>.</p>\n<p>The file modified to be parsed can be found <a data-is-external-link=\"true\" href=\"https://bitbucket.org/agalbachicar/rndf_gazebo_plugin/src/27c0fc290d95e15e36f0971df256220c378697e0/example/darpa.rndf?at=Issue%2F%2315_Change_waypoint_shape&amp;fileviewer=file-view-default\" rel=\"nofollow\">here</a>.</p>\n<p>The error message thrown is the following:</p>\n<div class=\"codehilite language-bash\"><pre><span></span>--File path: ../../src/samples/rndf/darpa.rndf\n--Print waypoints: <span class=\"m\">1</span>\n--Print lanes: <span class=\"m\">1</span>\n<span class=\"o\">[</span>Line <span class=\"m\">329</span><span class=\"o\">]</span>: Unable to parse segment header element\n <span class=\"s2\">&quot;segment_name  Nebraska_St     /*parking lot entrance road*/   &quot;</span>\n<span class=\"o\">[</span>Err<span class=\"o\">]</span> <span class=\"o\">[</span>rndf_gazebo_plugin.cc:100<span class=\"o\">]</span> EXCEPTION: File <span class=\"o\">[</span>../../src/samples/rndf/darpa.rndf<span class=\"o\">]</span> is invalid\n\nterminate called after throwing an instance of <span class=\"s1\">&#39;gazebo::common::Exception&#39;</span>\nAborted <span class=\"o\">(</span>core dumped<span class=\"o\">)</span>\n</pre></div>\n\n\n<p>After removing the comment:</p>\n<div class=\"codehilite language-bash\"><pre><span></span>--File path: ../../src/samples/rndf/darpa2.rndf\n--Print waypoints: <span class=\"m\">1</span>\n--Print lanes: <span class=\"m\">1</span>\n<span class=\"o\">[</span>Line <span class=\"m\">400</span><span class=\"o\">]</span>: Unable to parse spot header element.\n <span class=\"s2\">&quot;spot_width    16              &quot;</span>\n<span class=\"o\">[</span>Err<span class=\"o\">]</span> <span class=\"o\">[</span>rndf_gazebo_plugin.cc:100<span class=\"o\">]</span> EXCEPTION: File <span class=\"o\">[</span>../../src/samples/rndf/darpa2.rndf<span class=\"o\">]</span> is invalid\n\nterminate called after throwing an instance of <span class=\"s1\">&#39;gazebo::common::Exception&#39;</span>\nAborted <span class=\"o\">(</span>core dumped<span class=\"o\">)</span>\n</pre></div>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2016-11-30T16:38:46.139167+00:00", "milestone": null, "updated_on": "2016-12-03T06:02:31.477308+00:00", "type": "issue", "id": 1}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/manifold.json"}, "html": {"href": "#!/osrf/manifold"}, "avatar": {"href": "data/bytebucket.org/ravatar/{95277805-c4cc-45bf-b4bb-ad6091e930a7}ts=c_plus_plus"}}, "type": "repository", "name": "manifold", "full_name": "osrf/manifold", "uuid": "{95277805-c4cc-45bf-b4bb-ad6091e930a7}"}, "links": {"attachments": {"href": "data/repositories/osrf/manifold/issues/2/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/manifold/issues/2.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/manifold/issues/2/watch"}, "comments": {"href": "data/repositories/osrf/manifold/issues/2/comments_page=1.json"}, "html": {"href": "#!/osrf/manifold/issues/2/lane-width"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/manifold/issues/2/vote"}}, "reporter": {"display_name": "Agustin Alba Chicar", "uuid": "{8bdb6c14-4455-4664-9346-942102361f75}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8bdb6c14-4455-4664-9346-942102361f75%7D"}, "html": {"href": "https://bitbucket.org/%7B8bdb6c14-4455-4664-9346-942102361f75%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:53e8cbc5-23f1-4d62-aaaf-4a25ebc31c8f/07535b33-5cf2-4e10-bcd5-38bf6b994a6a/128"}}, "nickname": "agalbachicar", "type": "user", "account_id": "557058:53e8cbc5-23f1-4d62-aaaf-4a25ebc31c8f"}, "title": "Lane width", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Lane width argument is not parsed correctly. After parsing, calling manifold::rndf::Lane::Width() will return 0.", "markup": "markdown", "html": "<p>Lane width argument is not parsed correctly. After parsing, calling manifold::rndf::Lane::Width() will return 0.</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2016-11-30T16:41:19.318060+00:00", "milestone": null, "updated_on": "2016-12-03T06:02:43.089779+00:00", "type": "issue", "id": 2}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/manifold.json"}, "html": {"href": "#!/osrf/manifold"}, "avatar": {"href": "data/bytebucket.org/ravatar/{95277805-c4cc-45bf-b4bb-ad6091e930a7}ts=c_plus_plus"}}, "type": "repository", "name": "manifold", "full_name": "osrf/manifold", "uuid": "{95277805-c4cc-45bf-b4bb-ad6091e930a7}"}, "links": {"attachments": {"href": "data/repositories/osrf/manifold/issues/3/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/manifold/issues/3.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/manifold/issues/3/watch"}, "comments": {"href": "data/repositories/osrf/manifold/issues/3/comments_page=1.json"}, "html": {"href": "#!/osrf/manifold/issues/3/latitude-and-longitude-angle-parsing"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/manifold/issues/3/vote"}}, "reporter": {"display_name": "Agustin Alba Chicar", "uuid": "{8bdb6c14-4455-4664-9346-942102361f75}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8bdb6c14-4455-4664-9346-942102361f75%7D"}, "html": {"href": "https://bitbucket.org/%7B8bdb6c14-4455-4664-9346-942102361f75%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:53e8cbc5-23f1-4d62-aaaf-4a25ebc31c8f/07535b33-5cf2-4e10-bcd5-38bf6b994a6a/128"}}, "nickname": "agalbachicar", "type": "user", "account_id": "557058:53e8cbc5-23f1-4d62-aaaf-4a25ebc31c8f"}, "title": "Latitude and longitude angle parsing", "component": null, "votes": 0, "watches": 1, "content": {"raw": "We've (with @andres_fortier and @JChoclin ) found through the work on these issues:\r\n\r\n* [Issue #19](https://bitbucket.org/JChoclin/rndf_gazebo_plugin/issues/19): work through camera and coordinates of RNDF waypoints\r\n* [Issue #20](https://bitbucket.org/JChoclin/rndf_gazebo_plugin/issues/20): first detected and corrected below with sample RNDF files.\r\n\r\nThat latitude and longitude, at least from waypoints, is being parsed as radians instead of degrees. This causes that the construction of the ignition::math::SphericalCoordinates receives bad angles.\r\n\r\nI suggest doing the following:\r\n\r\n\r\n```\r\n#!c++\r\n\r\nignition::math::Angle lat(IGN_DTOR(latitude));\r\nignition::math::Angle lon(IGN_DTOR(longitude));\r\n```\r\nInstead of:\r\n\r\n```\r\n#!c++\r\n\r\nignition::math::Angle lat(latitude);\r\nignition::math::Angle lon(longitude);\r\n```\r\n\r\nIn line [130](#!/osrf/manifold/src/a49a7ea39816d9bf6f055aa3c6948fa5bbc69e99/src/rndf/Waypoint.cc?at=default&fileviewer=file-view-default#Waypoint.cc-130)\r\n\r\n\r\n", "markup": "markdown", "html": "<p>We've (with @andres_fortier and @JChoclin ) found through the work on these issues:</p>\n<ul>\n<li><a data-is-external-link=\"true\" href=\"https://bitbucket.org/JChoclin/rndf_gazebo_plugin/issues/19\" rel=\"nofollow\">Issue #19</a>: work through camera and coordinates of RNDF waypoints</li>\n<li><a data-is-external-link=\"true\" href=\"https://bitbucket.org/JChoclin/rndf_gazebo_plugin/issues/20\" rel=\"nofollow\">Issue #20</a>: first detected and corrected below with sample RNDF files.</li>\n</ul>\n<p>That latitude and longitude, at least from waypoints, is being parsed as radians instead of degrees. This causes that the construction of the ignition::math::SphericalCoordinates receives bad angles.</p>\n<p>I suggest doing the following:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">math</span><span class=\"o\">::</span><span class=\"n\">Angle</span> <span class=\"n\">lat</span><span class=\"p\">(</span><span class=\"n\">IGN_DTOR</span><span class=\"p\">(</span><span class=\"n\">latitude</span><span class=\"p\">));</span>\n<span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">math</span><span class=\"o\">::</span><span class=\"n\">Angle</span> <span class=\"n\">lon</span><span class=\"p\">(</span><span class=\"n\">IGN_DTOR</span><span class=\"p\">(</span><span class=\"n\">longitude</span><span class=\"p\">));</span>\n</pre></div>\n\n\n<p>Instead of:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">math</span><span class=\"o\">::</span><span class=\"n\">Angle</span> <span class=\"n\">lat</span><span class=\"p\">(</span><span class=\"n\">latitude</span><span class=\"p\">);</span>\n<span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">math</span><span class=\"o\">::</span><span class=\"n\">Angle</span> <span class=\"n\">lon</span><span class=\"p\">(</span><span class=\"n\">longitude</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>In line <a data-is-external-link=\"true\" href=\"#!/osrf/manifold/src/a49a7ea39816d9bf6f055aa3c6948fa5bbc69e99/src/rndf/Waypoint.cc?at=default&amp;fileviewer=file-view-default#Waypoint.cc-130\" rel=\"nofollow\">130</a></p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2016-12-02T18:27:29.759462+00:00", "milestone": null, "updated_on": "2016-12-06T16:17:11.288293+00:00", "type": "issue", "id": 3}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/manifold.json"}, "html": {"href": "#!/osrf/manifold"}, "avatar": {"href": "data/bytebucket.org/ravatar/{95277805-c4cc-45bf-b4bb-ad6091e930a7}ts=c_plus_plus"}}, "type": "repository", "name": "manifold", "full_name": "osrf/manifold", "uuid": "{95277805-c4cc-45bf-b4bb-ad6091e930a7}"}, "links": {"attachments": {"href": "data/repositories/osrf/manifold/issues/4/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/manifold/issues/4.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/manifold/issues/4/watch"}, "comments": {"href": "data/repositories/osrf/manifold/issues/4/comments_page=1.json"}, "html": {"href": "#!/osrf/manifold/issues/4/spot-parsing-issue"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/manifold/issues/4/vote"}}, "reporter": {"display_name": "Agustin Alba Chicar", "uuid": "{8bdb6c14-4455-4664-9346-942102361f75}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8bdb6c14-4455-4664-9346-942102361f75%7D"}, "html": {"href": "https://bitbucket.org/%7B8bdb6c14-4455-4664-9346-942102361f75%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:53e8cbc5-23f1-4d62-aaaf-4a25ebc31c8f/07535b33-5cf2-4e10-bcd5-38bf6b994a6a/128"}}, "nickname": "agalbachicar", "type": "user", "account_id": "557058:53e8cbc5-23f1-4d62-aaaf-4a25ebc31c8f"}, "title": "Spot parsing issue", "component": null, "votes": 0, "watches": 1, "content": {"raw": "I've got this error when parsing Darpa RNDF file example with Zone 14. You can find this file [here](https://gist.github.com/agalbachicar/168ea153fd8b2c5844148f742c8c0f56).\r\n\r\nThe ouput below is the displayed error message:\r\n\r\n```\r\n#!bash\r\n\r\n[Line 400]: Unable to parse spot header element.\r\n \"spot_width    16              \"\r\n[Err] [rndf_gazebo_plugin.cc:103] EXCEPTION: File [../../src/samples/rndf/darpa2.rndf] is invalid\r\n```\r\nThe error message shown by 'rndf_info' is the following:\r\n\r\n```\r\n#!bash\r\n\r\n./rndf_info /home/gazebo/ws/src/samples/rndf/darpa2.rndf \r\n[Line 400]: Unable to parse spot header element.\r\n \"spot_width    16              \"\r\nFile [/home/gazebo/ws/src/samples/rndf/darpa2.rndf] is invalid\r\n```\r\n\r\nThis leads me to remove all the zone 14 of the file to work with it. I'm working on commit [9990d57](#!/osrf/manifold/commits/9990d57)\r\n\r\nI'll mention @andres_fortier so he gets notified too.", "markup": "markdown", "html": "<p>I've got this error when parsing Darpa RNDF file example with Zone 14. You can find this file <a data-is-external-link=\"true\" href=\"https://gist.github.com/agalbachicar/168ea153fd8b2c5844148f742c8c0f56\" rel=\"nofollow\">here</a>.</p>\n<p>The ouput below is the displayed error message:</p>\n<div class=\"codehilite language-bash\"><pre><span></span><span class=\"o\">[</span>Line <span class=\"m\">400</span><span class=\"o\">]</span>: Unable to parse spot header element.\n <span class=\"s2\">&quot;spot_width    16              &quot;</span>\n<span class=\"o\">[</span>Err<span class=\"o\">]</span> <span class=\"o\">[</span>rndf_gazebo_plugin.cc:103<span class=\"o\">]</span> EXCEPTION: File <span class=\"o\">[</span>../../src/samples/rndf/darpa2.rndf<span class=\"o\">]</span> is invalid\n</pre></div>\n\n\n<p>The error message shown by 'rndf_info' is the following:</p>\n<div class=\"codehilite language-bash\"><pre><span></span>./rndf_info /home/gazebo/ws/src/samples/rndf/darpa2.rndf \n<span class=\"o\">[</span>Line <span class=\"m\">400</span><span class=\"o\">]</span>: Unable to parse spot header element.\n <span class=\"s2\">&quot;spot_width    16              &quot;</span>\nFile <span class=\"o\">[</span>/home/gazebo/ws/src/samples/rndf/darpa2.rndf<span class=\"o\">]</span> is invalid\n</pre></div>\n\n\n<p>This leads me to remove all the zone 14 of the file to work with it. I'm working on commit <a data-is-external-link=\"true\" href=\"#!/osrf/manifold/commits/9990d57\" rel=\"nofollow\">9990d57</a></p>\n<p>I'll mention @andres_fortier so he gets notified too.</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2016-12-06T13:47:34.559550+00:00", "milestone": null, "updated_on": "2016-12-06T17:56:52.584922+00:00", "type": "issue", "id": 4}, {"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/osrf/manifold.json"}, "html": {"href": "#!/osrf/manifold"}, "avatar": {"href": "data/bytebucket.org/ravatar/{95277805-c4cc-45bf-b4bb-ad6091e930a7}ts=c_plus_plus"}}, "type": "repository", "name": "manifold", "full_name": "osrf/manifold", "uuid": "{95277805-c4cc-45bf-b4bb-ad6091e930a7}"}, "links": {"attachments": {"href": "data/repositories/osrf/manifold/issues/5/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/manifold/issues/5.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/manifold/issues/5/watch"}, "comments": {"href": "data/repositories/osrf/manifold/issues/5/comments_page=1.json"}, "html": {"href": "#!/osrf/manifold/issues/5/parser-performance-review"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/manifold/issues/5/vote"}}, "reporter": {"display_name": "Andr\u00e9s Fortier", "uuid": "{f9c4496c-9146-4675-b1d5-bd0ed156cf58}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bf9c4496c-9146-4675-b1d5-bd0ed156cf58%7D"}, "html": {"href": "https://bitbucket.org/%7Bf9c4496c-9146-4675-b1d5-bd0ed156cf58%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:c59901bb-7eb0-4d2c-966f-7c66c154fef3/4af4377f-d065-496d-8cd4-01d5c760c6a3/128"}}, "nickname": "andres_fortier", "type": "user", "account_id": "557058:c59901bb-7eb0-4d2c-966f-7c66c154fef3"}, "title": "Parser performance review", "component": null, "votes": 0, "watches": 1, "content": {"raw": "We have been doing some initial benchmarking on the gazebo loading process and it looks like there may be room for improvement on the parsing side. I'm linking here to our issue so we can keep them in sync: https://bitbucket.org/JChoclin/rndf_gazebo_plugin/issues/17/benchmark-rendering.", "markup": "markdown", "html": "<p>We have been doing some initial benchmarking on the gazebo loading process and it looks like there may be room for improvement on the parsing side. I'm linking here to our issue so we can keep them in sync: <a href=\"https://bitbucket.org/JChoclin/rndf_gazebo_plugin/issues/17/benchmark-rendering\" rel=\"nofollow\" class=\"ap-connect-link\">https://bitbucket.org/JChoclin/rndf_gazebo_plugin/issues/17/benchmark-rendering</a>.</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2016-12-12T17:16:38.450380+00:00", "milestone": null, "updated_on": "2017-01-10T14:35:43.934518+00:00", "type": "issue", "id": 5}, {"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/osrf/manifold.json"}, "html": {"href": "#!/osrf/manifold"}, "avatar": {"href": "data/bytebucket.org/ravatar/{95277805-c4cc-45bf-b4bb-ad6091e930a7}ts=c_plus_plus"}}, "type": "repository", "name": "manifold", "full_name": "osrf/manifold", "uuid": "{95277805-c4cc-45bf-b4bb-ad6091e930a7}"}, "links": {"attachments": {"href": "data/repositories/osrf/manifold/issues/6/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/manifold/issues/6.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/manifold/issues/6/watch"}, "comments": {"href": "data/repositories/osrf/manifold/issues/6/comments_page=1.json"}, "html": {"href": "#!/osrf/manifold/issues/6/evaluate-integration-of-waypoints-and"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/manifold/issues/6/vote"}}, "reporter": {"display_name": "Agustin Alba Chicar", "uuid": "{8bdb6c14-4455-4664-9346-942102361f75}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8bdb6c14-4455-4664-9346-942102361f75%7D"}, "html": {"href": "https://bitbucket.org/%7B8bdb6c14-4455-4664-9346-942102361f75%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:53e8cbc5-23f1-4d62-aaaf-4a25ebc31c8f/07535b33-5cf2-4e10-bcd5-38bf6b994a6a/128"}}, "nickname": "agalbachicar", "type": "user", "account_id": "557058:53e8cbc5-23f1-4d62-aaaf-4a25ebc31c8f"}, "title": "Evaluate integration of waypoints and lanes to the graph", "component": null, "votes": 0, "watches": 1, "content": {"raw": "These are two use cases where we will benefit from having the Waypoints and Lanes inside the Graph structure.\r\n\r\n1. When building the junctions, we iterate through the lanes and the perimeters to get the exits and entries. Then, we have to get the reference to the waypoints to get its location.\r\n2. When sending information to the Box plugin, and getting the waypoints of a complete lane and its exits.\r\n\r\nIn both cases, we need to call some functions like the following:\r\n\r\n\r\n```\r\n#!c++\r\n\r\nmanifold::rndf::Waypoint DynamicRender::GetWaypointByUniqueId(\r\n  const manifold::rndf::UniqueId &waypointId) {\r\n  try {\r\n    return GetWaypointInSegmentsByUniqueId(waypointId);\r\n  }\r\n  catch(gazebo::common::Exception &e) {\r\n  }\r\n  return GetWaypointInZonesByUniqueId(waypointId);\r\n}\r\n\r\nmanifold::rndf::Waypoint DynamicRender::GetWaypointInSegmentsByUniqueId(\r\n  const manifold::rndf::UniqueId &waypointId) {\r\n  std::vector<manifold::rndf::Segment> &segments =\r\n  rndfInfo->Segments();\r\n  for (uint i = 0; i < segments.size(); i++) {\r\n    manifold::rndf::Segment &segment = segments[i];\r\n    if (segment.Id() != waypointId.X())\r\n      continue;\r\n    std::vector<manifold::rndf::Lane> &lanes =\r\n      segment.Lanes();\r\n    for (uint j = 0; j < lanes.size(); j++) {\r\n      manifold::rndf::Lane &lane = lanes[j];\r\n      if (lane.Id() != waypointId.Y())\r\n        continue;\r\n      std::vector<manifold::rndf::Waypoint> waypoints =\r\n        lane.Waypoints();\r\n      for (uint k = 0; k < waypoints.size(); k++) {\r\n        manifold::rndf::Waypoint &waypoint = waypoints[k];\r\n        if (waypoint.Id() == waypointId.Z())\r\n          return waypoint;\r\n      }\r\n      gzthrow(\"Error. Waypoint \" +\r\n        createWaypointName(waypointId.X(),\r\n          waypointId.Y(),\r\n          waypointId.Z()) +\r\n        \" has not been found in segments.\");\r\n    }\r\n    gzthrow(\"Error. Waypoint \" +\r\n      createWaypointName(waypointId.X(),\r\n        waypointId.Y(),\r\n        waypointId.Z()) +\r\n      \" has not been found in segments.\");\r\n  }\r\n  gzthrow(\"Error. Waypoint \" +\r\n    createWaypointName(waypointId.X(),\r\n      waypointId.Y(),\r\n      waypointId.Z()) +\r\n    \" has not been found in segments.\");\r\n}\r\n\r\nmanifold::rndf::Waypoint DynamicRender::GetWaypointInZonesByUniqueId(\r\n  const manifold::rndf::UniqueId &waypointId) {\r\n  if (waypointId.Y() != 0) {\r\n    gzthrow(\"Error. Waypoint \" +\r\n      createWaypointName(waypointId.X(),\r\n        waypointId.Y(),\r\n        waypointId.Z()) +\r\n      \" has not been found in zones.\");\r\n  }\r\n  std::vector<manifold::rndf::Zone> &zones =\r\n  rndfInfo->Zones();\r\n  for (uint i = 0; i < zones.size(); i++) {\r\n    manifold::rndf::Zone &zone = zones[i];\r\n    if (zone.Id() != waypointId.X())\r\n      continue;\r\n    manifold::rndf::Perimeter &perimeter =\r\n      zone.Perimeter();\r\n    std::vector<manifold::rndf::Waypoint> &waypoints =\r\n      perimeter.Points();\r\n    for (uint j = 0; j < waypoints.size(); j++) {\r\n      manifold::rndf::Waypoint waypoint =\r\n        waypoints[j];\r\n      if (waypoint.Id() == waypointId.Z())\r\n        return waypoint;\r\n    }\r\n    gzthrow(\"Error. Waypoint \" +\r\n      createWaypointName(waypointId.X(),\r\n        waypointId.Y(),\r\n        waypointId.Z()) +\r\n      \" has not been found in zones.\");\r\n  }\r\n  gzthrow(\"Error. Waypoint \" +\r\n    createWaypointName(waypointId.X(),\r\n      waypointId.Y(),\r\n      waypointId.Z()) +\r\n    \" has not been found in zones.\");\r\n}\r\n\r\nmanifold::rndf::Lane* DynamicRender::GetLaneByUniqueId(\r\n  const manifold::rndf::UniqueId &waypointId) {\r\n  std::vector<manifold::rndf::Segment> &segments =\r\n  rndfInfo->Segments();\r\n  for (uint i = 0; i < segments.size(); i++) {\r\n    manifold::rndf::Segment &segment = segments[i];\r\n    if (segment.Id() != waypointId.X())\r\n      continue;\r\n    std::vector<manifold::rndf::Lane> &lanes =\r\n      segment.Lanes();\r\n    for (uint j = 0; j < lanes.size(); j++) {\r\n      manifold::rndf::Lane &lane = lanes[j];\r\n      if (lane.Id() != waypointId.Y())\r\n        continue;\r\n      std::vector<manifold::rndf::Waypoint> waypoints =\r\n        lane.Waypoints();\r\n      for (uint k = 0; k < waypoints.size(); k++) {\r\n        manifold::rndf::Waypoint &waypoint = waypoints[k];\r\n        if (waypoint.Id() == waypointId.Z())\r\n          return &lane;\r\n      }\r\n      return NULL;\r\n    }\r\n    return NULL;\r\n  }\r\n  return NULL;\r\n}\r\n```\r\nTo see these functions in context, please refer to the following [link](https://bitbucket.org/JChoclin/rndf_gazebo_plugin/src/7a229dec41d453d09fbe04c114193a2e8e6bb022/src/rndf_gazebo_plugin.cc?fileviewer=file-view-default#rndf_gazebo_plugin.cc-169). As you can see we need to iterate through the whole structure of segments and/or zones to reach a lane.\r\n\r\nI mention @andres_fortier so he is notified with the discussion.", "markup": "markdown", "html": "<p>These are two use cases where we will benefit from having the Waypoints and Lanes inside the Graph structure.</p>\n<ol>\n<li>When building the junctions, we iterate through the lanes and the perimeters to get the exits and entries. Then, we have to get the reference to the waypoints to get its location.</li>\n<li>When sending information to the Box plugin, and getting the waypoints of a complete lane and its exits.</li>\n</ol>\n<p>In both cases, we need to call some functions like the following:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Waypoint</span> <span class=\"n\">DynamicRender</span><span class=\"o\">::</span><span class=\"n\">GetWaypointByUniqueId</span><span class=\"p\">(</span>\n  <span class=\"k\">const</span> <span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">UniqueId</span> <span class=\"o\">&amp;</span><span class=\"n\">waypointId</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">try</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">GetWaypointInSegmentsByUniqueId</span><span class=\"p\">(</span><span class=\"n\">waypointId</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"n\">gazebo</span><span class=\"o\">::</span><span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">Exception</span> <span class=\"o\">&amp;</span><span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"n\">GetWaypointInZonesByUniqueId</span><span class=\"p\">(</span><span class=\"n\">waypointId</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Waypoint</span> <span class=\"n\">DynamicRender</span><span class=\"o\">::</span><span class=\"n\">GetWaypointInSegmentsByUniqueId</span><span class=\"p\">(</span>\n  <span class=\"k\">const</span> <span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">UniqueId</span> <span class=\"o\">&amp;</span><span class=\"n\">waypointId</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Segment</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">segments</span> <span class=\"o\">=</span>\n  <span class=\"n\">rndfInfo</span><span class=\"o\">-&gt;</span><span class=\"n\">Segments</span><span class=\"p\">();</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">uint</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">segments</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Segment</span> <span class=\"o\">&amp;</span><span class=\"n\">segment</span> <span class=\"o\">=</span> <span class=\"n\">segments</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">segment</span><span class=\"p\">.</span><span class=\"n\">Id</span><span class=\"p\">()</span> <span class=\"o\">!=</span> <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">X</span><span class=\"p\">())</span>\n      <span class=\"k\">continue</span><span class=\"p\">;</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Lane</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">lanes</span> <span class=\"o\">=</span>\n      <span class=\"n\">segment</span><span class=\"p\">.</span><span class=\"n\">Lanes</span><span class=\"p\">();</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">uint</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">lanes</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Lane</span> <span class=\"o\">&amp;</span><span class=\"n\">lane</span> <span class=\"o\">=</span> <span class=\"n\">lanes</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">];</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">lane</span><span class=\"p\">.</span><span class=\"n\">Id</span><span class=\"p\">()</span> <span class=\"o\">!=</span> <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Y</span><span class=\"p\">())</span>\n        <span class=\"k\">continue</span><span class=\"p\">;</span>\n      <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Waypoint</span><span class=\"o\">&gt;</span> <span class=\"n\">waypoints</span> <span class=\"o\">=</span>\n        <span class=\"n\">lane</span><span class=\"p\">.</span><span class=\"n\">Waypoints</span><span class=\"p\">();</span>\n      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">uint</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">waypoints</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">k</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Waypoint</span> <span class=\"o\">&amp;</span><span class=\"n\">waypoint</span> <span class=\"o\">=</span> <span class=\"n\">waypoints</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">];</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">waypoint</span><span class=\"p\">.</span><span class=\"n\">Id</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Z</span><span class=\"p\">())</span>\n          <span class=\"k\">return</span> <span class=\"n\">waypoint</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"n\">gzthrow</span><span class=\"p\">(</span><span class=\"s\">&quot;Error. Waypoint &quot;</span> <span class=\"o\">+</span>\n        <span class=\"n\">createWaypointName</span><span class=\"p\">(</span><span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">X</span><span class=\"p\">(),</span>\n          <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Y</span><span class=\"p\">(),</span>\n          <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Z</span><span class=\"p\">())</span> <span class=\"o\">+</span>\n        <span class=\"s\">&quot; has not been found in segments.&quot;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">gzthrow</span><span class=\"p\">(</span><span class=\"s\">&quot;Error. Waypoint &quot;</span> <span class=\"o\">+</span>\n      <span class=\"n\">createWaypointName</span><span class=\"p\">(</span><span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">X</span><span class=\"p\">(),</span>\n        <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Y</span><span class=\"p\">(),</span>\n        <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Z</span><span class=\"p\">())</span> <span class=\"o\">+</span>\n      <span class=\"s\">&quot; has not been found in segments.&quot;</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"n\">gzthrow</span><span class=\"p\">(</span><span class=\"s\">&quot;Error. Waypoint &quot;</span> <span class=\"o\">+</span>\n    <span class=\"n\">createWaypointName</span><span class=\"p\">(</span><span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">X</span><span class=\"p\">(),</span>\n      <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Y</span><span class=\"p\">(),</span>\n      <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Z</span><span class=\"p\">())</span> <span class=\"o\">+</span>\n    <span class=\"s\">&quot; has not been found in segments.&quot;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Waypoint</span> <span class=\"n\">DynamicRender</span><span class=\"o\">::</span><span class=\"n\">GetWaypointInZonesByUniqueId</span><span class=\"p\">(</span>\n  <span class=\"k\">const</span> <span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">UniqueId</span> <span class=\"o\">&amp;</span><span class=\"n\">waypointId</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Y</span><span class=\"p\">()</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">gzthrow</span><span class=\"p\">(</span><span class=\"s\">&quot;Error. Waypoint &quot;</span> <span class=\"o\">+</span>\n      <span class=\"n\">createWaypointName</span><span class=\"p\">(</span><span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">X</span><span class=\"p\">(),</span>\n        <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Y</span><span class=\"p\">(),</span>\n        <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Z</span><span class=\"p\">())</span> <span class=\"o\">+</span>\n      <span class=\"s\">&quot; has not been found in zones.&quot;</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Zone</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">zones</span> <span class=\"o\">=</span>\n  <span class=\"n\">rndfInfo</span><span class=\"o\">-&gt;</span><span class=\"n\">Zones</span><span class=\"p\">();</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">uint</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">zones</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Zone</span> <span class=\"o\">&amp;</span><span class=\"n\">zone</span> <span class=\"o\">=</span> <span class=\"n\">zones</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">zone</span><span class=\"p\">.</span><span class=\"n\">Id</span><span class=\"p\">()</span> <span class=\"o\">!=</span> <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">X</span><span class=\"p\">())</span>\n      <span class=\"k\">continue</span><span class=\"p\">;</span>\n    <span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Perimeter</span> <span class=\"o\">&amp;</span><span class=\"n\">perimeter</span> <span class=\"o\">=</span>\n      <span class=\"n\">zone</span><span class=\"p\">.</span><span class=\"n\">Perimeter</span><span class=\"p\">();</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Waypoint</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">waypoints</span> <span class=\"o\">=</span>\n      <span class=\"n\">perimeter</span><span class=\"p\">.</span><span class=\"n\">Points</span><span class=\"p\">();</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">uint</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">waypoints</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Waypoint</span> <span class=\"n\">waypoint</span> <span class=\"o\">=</span>\n        <span class=\"n\">waypoints</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">];</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">waypoint</span><span class=\"p\">.</span><span class=\"n\">Id</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Z</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span> <span class=\"n\">waypoint</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">gzthrow</span><span class=\"p\">(</span><span class=\"s\">&quot;Error. Waypoint &quot;</span> <span class=\"o\">+</span>\n      <span class=\"n\">createWaypointName</span><span class=\"p\">(</span><span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">X</span><span class=\"p\">(),</span>\n        <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Y</span><span class=\"p\">(),</span>\n        <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Z</span><span class=\"p\">())</span> <span class=\"o\">+</span>\n      <span class=\"s\">&quot; has not been found in zones.&quot;</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"n\">gzthrow</span><span class=\"p\">(</span><span class=\"s\">&quot;Error. Waypoint &quot;</span> <span class=\"o\">+</span>\n    <span class=\"n\">createWaypointName</span><span class=\"p\">(</span><span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">X</span><span class=\"p\">(),</span>\n      <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Y</span><span class=\"p\">(),</span>\n      <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Z</span><span class=\"p\">())</span> <span class=\"o\">+</span>\n    <span class=\"s\">&quot; has not been found in zones.&quot;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Lane</span><span class=\"o\">*</span> <span class=\"n\">DynamicRender</span><span class=\"o\">::</span><span class=\"n\">GetLaneByUniqueId</span><span class=\"p\">(</span>\n  <span class=\"k\">const</span> <span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">UniqueId</span> <span class=\"o\">&amp;</span><span class=\"n\">waypointId</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Segment</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">segments</span> <span class=\"o\">=</span>\n  <span class=\"n\">rndfInfo</span><span class=\"o\">-&gt;</span><span class=\"n\">Segments</span><span class=\"p\">();</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">uint</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">segments</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Segment</span> <span class=\"o\">&amp;</span><span class=\"n\">segment</span> <span class=\"o\">=</span> <span class=\"n\">segments</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">segment</span><span class=\"p\">.</span><span class=\"n\">Id</span><span class=\"p\">()</span> <span class=\"o\">!=</span> <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">X</span><span class=\"p\">())</span>\n      <span class=\"k\">continue</span><span class=\"p\">;</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Lane</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">lanes</span> <span class=\"o\">=</span>\n      <span class=\"n\">segment</span><span class=\"p\">.</span><span class=\"n\">Lanes</span><span class=\"p\">();</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">uint</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">lanes</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Lane</span> <span class=\"o\">&amp;</span><span class=\"n\">lane</span> <span class=\"o\">=</span> <span class=\"n\">lanes</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">];</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">lane</span><span class=\"p\">.</span><span class=\"n\">Id</span><span class=\"p\">()</span> <span class=\"o\">!=</span> <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Y</span><span class=\"p\">())</span>\n        <span class=\"k\">continue</span><span class=\"p\">;</span>\n      <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Waypoint</span><span class=\"o\">&gt;</span> <span class=\"n\">waypoints</span> <span class=\"o\">=</span>\n        <span class=\"n\">lane</span><span class=\"p\">.</span><span class=\"n\">Waypoints</span><span class=\"p\">();</span>\n      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">uint</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">waypoints</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">k</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">manifold</span><span class=\"o\">::</span><span class=\"n\">rndf</span><span class=\"o\">::</span><span class=\"n\">Waypoint</span> <span class=\"o\">&amp;</span><span class=\"n\">waypoint</span> <span class=\"o\">=</span> <span class=\"n\">waypoints</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">];</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">waypoint</span><span class=\"p\">.</span><span class=\"n\">Id</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">waypointId</span><span class=\"p\">.</span><span class=\"n\">Z</span><span class=\"p\">())</span>\n          <span class=\"k\">return</span> <span class=\"o\">&amp;</span><span class=\"n\">lane</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>To see these functions in context, please refer to the following <a data-is-external-link=\"true\" href=\"https://bitbucket.org/JChoclin/rndf_gazebo_plugin/src/7a229dec41d453d09fbe04c114193a2e8e6bb022/src/rndf_gazebo_plugin.cc?fileviewer=file-view-default#rndf_gazebo_plugin.cc-169\" rel=\"nofollow\">link</a>. As you can see we need to iterate through the whole structure of segments and/or zones to reach a lane.</p>\n<p>I mention @andres_fortier so he is notified with the discussion.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-01-13T19:22:44.719752+00:00", "milestone": null, "updated_on": "2017-02-02T14:52:31.241164+00:00", "type": "issue", "id": 6}], "page": 1, "size": 6}